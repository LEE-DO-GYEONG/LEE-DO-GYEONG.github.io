[ { "title": "6.advanced_screenshot", "url": "/posts/6_advanced_screenshot/", "categories": "Visual_Studio, GUI_project", "tags": "GUI, python, Visual_Studio", "date": "2021-12-29 03:50:00 +0900", "snippet": "6. advanced_screenshotimport timeimport keyboardfrom PIL import ImageGrabdef screenshot(): curr_time = time.strftime(&quot;_%Y%m%d_%H%M%S&quot;) img = ImageGrab.grab() img.save(&quot;image{}.png&quot;.format(curr_time))keyboard.add_hotkey(&quot;F9&quot;, screenshot) # 사용자가 F9 키를 누르면 스크린 샷 저장keyboard.wait(&quot;esc&quot;) # 사용자가 esc 를 누를 때까지 프로그램 수행" }, { "title": "5.apply_options", "url": "/posts/5_apply_options/", "categories": "Visual_Studio, GUI_project", "tags": "GUI, python, Visual_Studio", "date": "2021-12-29 03:49:00 +0900", "snippet": "5. apply_optionsfrom tkinter import *import tkinter.ttk as ttkfrom tkinter import filedialogimport tkinter.messagebox as msgboxfrom PIL import Imageimport osroot = Tk()root.title(&quot;Nado GUI&quot;) # 제목# root.geometry(&quot;640x480&quot;) # 가로 x 세로# 파일 프레임 (파일 추가, 선택 삭제)file_frame = Frame(root)file_frame.pack(fill=&quot;x&quot;, padx=5, pady=5) # 간격 띄우기# 파일 추가 기능def add_file(): files = filedialog.askopenfilenames(title=&quot;이미지 파일을 선택하세요&quot;, \\ filetypes=((&quot;PNG 파일&quot;, &quot;*.png&quot;), (&quot;모든 파일&quot;, &quot;*.*&quot;)),\\ initialdir=&quot;C:/&quot; # 최초에 C:/ 경로를 보여줌 ) # 사용자가 선택한 파일 목록 출력 for file in files: list_file.insert(END, file)# 선택 삭제 기능def del_file(): # print(list_file.curselection()) for index in reversed(list_file.curselection()): list_file.delete(index)# 저장 경로 기능def browse_dest_path(): folder_selected = filedialog.askdirectory() if folder_selected == &#39;&#39;: # 사용자가 취소를 누를 때 return txt_dest_path.delete(0, END) txt_dest_path.insert(0, folder_selected) # 이미지 통합def merge_image(): print(&quot;가로넓이 : &quot;, cmd_width.get()) print(&quot;간격 : &quot;, cmd_space.get()) print(&quot;포맷 : &quot;, cmd_format.get()) try: # 가로넓이 img_width = cmd_width.get() if img_width == &quot;원본유지&quot;: img_width = -1 # -1 일때는 원본 기준으로 else: img_width = int(img_width) # 간격 img_space = cmd_space.get() if img_space == &quot;좁게&quot;: img_space = 30 elif img_space == &quot;보통&quot;: img_space = 60 elif img_space == &quot;넓게&quot;: img_space = 90 else: img_space = 0 # 포맷 img_format = cmd_format.get().lower() # PNG, JPG, BMP 값을 받아와서 소문자로 변경 images = [Image.open(x) for x in list_file.get(0, END)] # 이미지 사이즈 리스트에 넣어서 하나씩 처리 image_sizes = [] # [(width1, height1), (width2, height2), ...] if img_width &amp;gt; -1: image_sizes = [(int(img_width), int(img_width * x.size[1] / x.size[0])) for x in images] # width 값 변경 else: image_sizes = [(x.size[0], x.size[1]) for x in images] # 원본 사이즈 사용 # 계산식 # (원본 width) : (원본 height) = (변경 width) : (변경 height) widths, heights = zip(*(image_sizes)) # 최대 넓이, 전체 높이 구해옴 max_width, total_height = max(widths), sum(heights) # 스케치북 준비 if img_space &amp;gt; 0: # 이미지 간격 옵션 적용 total_height += (img_space * (len(images) - 1)) result_img = Image.new(&quot;RGB&quot;, (max_width, total_height), (255, 255, 255)) y_offset = 0 # y 위치 for idx, img in enumerate(images): # width 가 원본유지가 아닐 때에는 이미지 크기 조정 if img_width &amp;gt; -1: img = img.resize(image_sizes[idx]) result_img.paste(img, (0, y_offset)) y_offset += (img.size[1] + img_space) # height 값 + 사용자가 지정한 간경 progress = (idx + 1) / len(images) * 100 # 실제 퍼센트 정보를 계산 p_var.set(progress) progress_bar.update() # 포맷 옵션 처리 file_name = &quot;nado_photo.&quot; + img_format dest_path = os.path.join(txt_dest_path.get(), file_name) result_img.save(dest_path) msgbox.showinfo(&quot;알림&quot;, &quot;작업이 완료되었습니다.&quot;) except Exception as err: # 예외처리 msgbox.showerror(&quot;에러&quot;, err) # 시작 기능def start(): # 각 옵션들 값을 확인 # print(&quot;가로넓이 : &quot;, cmd_width.get()) # print(&quot;간격 : &quot;, cmd_space.get()) # print(&quot;포맷 : &quot;, cmd_format.get()) # 파일 목록 확인 if list_file.size() == 0: msgbox.showwarning(&quot;경고&quot;, &quot;이미지 파일을 추가하세요&quot;) return # 저장 경로 확인 if len(txt_dest_path.get()) == 0: msgbox.showwarning(&quot;경고&quot;, &quot;저장 경로를 선택하세요&quot;) return # 이미지 통합 작업 merge_image() btn_add_file = Button(file_frame, padx=5, pady=5, width=12, text=&quot;파일추가&quot;, command=add_file)btn_add_file.pack(side=&quot;left&quot;)btn_del_file = Button(file_frame, padx=5, pady=5, width=12, text=&quot;파일삭제&quot;, command=del_file)btn_del_file.pack(side=&quot;right&quot;)# 리스트 프레임list_frame = Frame(root)list_frame.pack(fill=&quot;both&quot;, padx=5, pady=5)scrollbar = Scrollbar(list_frame)scrollbar.pack(side=&quot;right&quot;, fill=&quot;y&quot;)list_file = Listbox(list_frame, selectmode=&quot;extended&quot;, height=15, yscrollcommand=scrollbar.set)list_file.pack(side=&quot;left&quot;, fill=&quot;both&quot;, expand=True)scrollbar.config(command=list_file.yview)# 저장 경로 프레임path_frame = LabelFrame(root, text=&quot;저장경로&quot;)path_frame.pack(fill=&quot;x&quot;, padx=5, pady=5, ipady=5)txt_dest_path = Entry(path_frame)txt_dest_path.pack(side=&quot;left&quot;, fill=&quot;x&quot;, expand=True, padx=5, pady=5, ipady = 4)btn_dest_path = Button(path_frame, text=&quot;찾아보기&quot;, width=10, command=browse_dest_path)btn_dest_path.pack(side=&quot;right&quot;, padx=5, pady=5)# 옵션 프레임frame_option = LabelFrame(root, text=&quot;옵션&quot;)frame_option.pack(padx=5, pady=5, ipady=5)# 1. 가로 넓이 옵션## 가로 넓이 레이블lbl_width = Label(frame_option, text=&quot;가로넓이&quot;, width=8)lbl_width.pack(side=&quot;left&quot;, padx=5, pady=5)## 가로 넓이 콤보opt_width = [&quot;원본유지&quot;, &quot;1024&quot;, &quot;800&quot;, &quot;640&quot;]cmd_width = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_width, width=10)cmd_width.current(0)cmd_width.pack(side=&quot;left&quot;, padx=5, pady=5)# 2. 간격 옵션## 간격 옵션 레이블lbl_space = Label(frame_option, text=&quot;간격&quot;, width=8)lbl_space.pack(side=&quot;left&quot;, padx=5, pady=5)## 간격 옵션 콤보opt_space = [&quot;없음&quot;, &quot;좁게&quot;, &quot;보통&quot;, &quot;넓게&quot;]cmd_space = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_space, width=10)cmd_space.current(0)cmd_space.pack(side=&quot;left&quot;, padx=5, pady=5)# 3. 파일 포맷 옵션## 파일 포맷 옵션 레이블lbl_format = Label(frame_option, text=&quot;포맷&quot;, width=8)lbl_format.pack(side=&quot;left&quot;, padx=5, pady=5)## 파일 포맷 옵션 콤보opt_format = [&quot;PNG&quot;, &quot;JPG&quot;, &quot;BMP&quot;]cmd_format = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_format, width=10)cmd_format.current(0)cmd_format.pack(side=&quot;left&quot;, padx=5, pady=5)# 진행 상황 progress barframe_progress = LabelFrame(root, text=&quot;진행상황&quot;)frame_progress.pack(fill=&quot;x&quot;, padx=5, pady=5, ipady=5)p_var = DoubleVar()progress_bar = ttk.Progressbar(frame_progress, maximum=100, variable=p_var)progress_bar.pack(fill=&quot;x&quot;, padx=5, pady=5)# 실행 프레임frame_run = Frame(root)frame_run.pack(fill=&quot;x&quot;, padx=5, pady=5)btn_close = Button(frame_run, padx=5, pady=5, text=&quot;닫기&quot;, width=12, command=root.quit)btn_close.pack(side=&quot;right&quot;, padx=5, pady=5)btn_start = Button(frame_run, padx=5, pady=5, text=&quot;시작&quot;, width=12, command=start)btn_start.pack(side=&quot;right&quot;, padx=5, pady=5)root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "4.merge_image", "url": "/posts/4_merge_image/", "categories": "Visual_Studio, GUI_project", "tags": "GUI, python, Visual_Studio", "date": "2021-12-29 03:48:00 +0900", "snippet": "4. merge_imagefrom tkinter import *import tkinter.ttk as ttkfrom tkinter import filedialogimport tkinter.messagebox as msgboxfrom PIL import Imageimport osroot = Tk()root.title(&quot;Nado GUI&quot;) # 제목# root.geometry(&quot;640x480&quot;) # 가로 x 세로# 파일 프레임 (파일 추가, 선택 삭제)file_frame = Frame(root)file_frame.pack(fill=&quot;x&quot;, padx=5, pady=5) # 간격 띄우기# 파일 추가 기능def add_file(): files = filedialog.askopenfilenames(title=&quot;이미지 파일을 선택하세요&quot;, \\ filetypes=((&quot;PNG 파일&quot;, &quot;*.png&quot;), (&quot;모든 파일&quot;, &quot;*.*&quot;)),\\ initialdir=&quot;C:/&quot; # 최초에 C:/ 경로를 보여줌 ) # 사용자가 선택한 파일 목록 출력 for file in files: list_file.insert(END, file)# 선택 삭제 기능def del_file(): # print(list_file.curselection()) for index in reversed(list_file.curselection()): list_file.delete(index)# 저장 경로 기능def browse_dest_path(): folder_selected = filedialog.askdirectory() if folder_selected is None: # 사용자가 취소를 누를 때 return txt_dest_path.delete(0, END) txt_dest_path.insert(0, folder_selected) # 이미지 통합def merge_image(): # print(list_file.get(0, END)) # 모든 파일 목록을 가지고 오기 images = [Image.open(x) for x in list_file.get(0, END)] # widths = [x.size[0] for x in images] # heights = [x.size[1] for x in images] widths, heights = zip(*(x.size for x in images)) # 최대 넓이, 전체 높이 구해옴 max_width, total_height = max(widths), sum(heights) # 스케치북 준비 result_img = Image.new(&quot;RGB&quot;, (max_width, total_height), (255, 255, 255)) y_offset = 0 # y 위치 # for img in images: # result_img.paste(img, (0, y_offset)) # y_offset += img.size[1] # height 값 만큼 더해줌 for idx, img in enumerate(images): result_img.paste(img, (0, y_offset)) y_offset += img.size[1] progress = (idx + 1) / len(images) * 100 # 실제 퍼센트 정보를 계산 p_var.set(progress) progress_bar.update() dest_path = os.path.join(txt_dest_path.get(), &quot;nado_photo.jpg&quot;) result_img.save(dest_path) msgbox.showinfo(&quot;알림&quot;, &quot;작업이 완료되었습니다.&quot;) # 시작 기능def start(): # 각 옵션들 값을 확인 print(&quot;가로넓이 : &quot;, cmd_width.get()) print(&quot;간격 : &quot;, cmd_space.get()) print(&quot;포맷 : &quot;, cmd_format.get()) # 파일 목록 확인 if list_file.size() == 0: msgbox.showwarning(&quot;경고&quot;, &quot;이미지 파일을 추가하세요&quot;) return # 저장 경로 확인 if len(txt_dest_path.get()) == 0: msgbox.showwarning(&quot;경고&quot;, &quot;저장 경로를 선택하세요&quot;) return # 이미지 통합 작업 merge_image() btn_add_file = Button(file_frame, padx=5, pady=5, width=12, text=&quot;파일추가&quot;, command=add_file)btn_add_file.pack(side=&quot;left&quot;)btn_del_file = Button(file_frame, padx=5, pady=5, width=12, text=&quot;파일삭제&quot;, command=del_file)btn_del_file.pack(side=&quot;right&quot;)# 리스트 프레임list_frame = Frame(root)list_frame.pack(fill=&quot;both&quot;, padx=5, pady=5)scrollbar = Scrollbar(list_frame)scrollbar.pack(side=&quot;right&quot;, fill=&quot;y&quot;)list_file = Listbox(list_frame, selectmode=&quot;extended&quot;, height=15, yscrollcommand=scrollbar.set)list_file.pack(side=&quot;left&quot;, fill=&quot;both&quot;, expand=True)scrollbar.config(command=list_file.yview)# 저장 경로 프레임path_frame = LabelFrame(root, text=&quot;저장경로&quot;)path_frame.pack(fill=&quot;x&quot;, padx=5, pady=5, ipady=5)txt_dest_path = Entry(path_frame)txt_dest_path.pack(side=&quot;left&quot;, fill=&quot;x&quot;, expand=True, padx=5, pady=5, ipady = 4)btn_dest_path = Button(path_frame, text=&quot;찾아보기&quot;, width=10, command=browse_dest_path)btn_dest_path.pack(side=&quot;right&quot;, padx=5, pady=5)# 옵션 프레임frame_option = LabelFrame(root, text=&quot;옵션&quot;)frame_option.pack(padx=5, pady=5, ipady=5)# 1. 가로 넓이 옵션## 가로 넓이 레이블lbl_width = Label(frame_option, text=&quot;가로넓이&quot;, width=8)lbl_width.pack(side=&quot;left&quot;, padx=5, pady=5)## 가로 넓이 콤보opt_width = [&quot;원본유지&quot;, &quot;1024&quot;, &quot;800&quot;, &quot;640&quot;]cmd_width = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_width, width=10)cmd_width.current(0)cmd_width.pack(side=&quot;left&quot;, padx=5, pady=5)# 2. 간격 옵션## 간격 옵션 레이블lbl_space = Label(frame_option, text=&quot;간격&quot;, width=8)lbl_space.pack(side=&quot;left&quot;, padx=5, pady=5)## 간격 옵션 콤보opt_space = [&quot;없음&quot;, &quot;좁게&quot;, &quot;보통&quot;, &quot;넓게&quot;]cmd_space = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_space, width=10)cmd_space.current(0)cmd_space.pack(side=&quot;left&quot;, padx=5, pady=5)# 3. 파일 포맷 옵션## 파일 포맷 옵션 레이블lbl_format = Label(frame_option, text=&quot;포맷&quot;, width=8)lbl_format.pack(side=&quot;left&quot;, padx=5, pady=5)## 파일 포맷 옵션 콤보opt_format = [&quot;PNG&quot;, &quot;JPG&quot;, &quot;BMP&quot;]cmd_format = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_format, width=10)cmd_format.current(0)cmd_format.pack(side=&quot;left&quot;, padx=5, pady=5)# 진행 상황 progress barframe_progress = LabelFrame(root, text=&quot;진행상황&quot;)frame_progress.pack(fill=&quot;x&quot;, padx=5, pady=5, ipady=5)p_var = DoubleVar()progress_bar = ttk.Progressbar(frame_progress, maximum=100, variable=p_var)progress_bar.pack(fill=&quot;x&quot;, padx=5, pady=5)# 실행 프레임frame_run = Frame(root)frame_run.pack(fill=&quot;x&quot;, padx=5, pady=5)btn_close = Button(frame_run, padx=5, pady=5, text=&quot;닫기&quot;, width=12, command=root.quit)btn_close.pack(side=&quot;right&quot;, padx=5, pady=5)btn_start = Button(frame_run, padx=5, pady=5, text=&quot;시작&quot;, width=12, command=start)btn_start.pack(side=&quot;right&quot;, padx=5, pady=5)root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "3.auto_screenshot", "url": "/posts/3_auto_screenshot/", "categories": "Visual_Studio, GUI_project", "tags": "GUI, python, Visual_Studio", "date": "2021-12-29 03:47:00 +0900", "snippet": "3. auto_screenshotfrom PIL import ImageGrabimport timetime.sleep(5) # 5초 대기: 사용자가 준비하는 시간for i in range(1, 11): # 2초 간격으로 10개 이미지 저장 img = ImageGrab.grab() # 현재 스크린 이미지를 가져옴 img.save(&quot;image{}.png&quot;.format(i)) # 파일로 저장 time.sleep(2) # 2초 단위 " }, { "title": "2.basic_function", "url": "/posts/2_basic_function/", "categories": "Visual_Studio, GUI_project", "tags": "GUI, python, Visual_Studio", "date": "2021-12-29 03:46:00 +0900", "snippet": "2. basic_functionfrom tkinter import *import tkinter.ttk as ttkfrom tkinter import filedialogimport tkinter.messagebox as msgboxroot = Tk()root.title(&quot;Nado GUI&quot;) # 제목# root.geometry(&quot;640x480&quot;) # 가로 x 세로# 파일 프레임 (파일 추가, 선택 삭제)file_frame = Frame(root)file_frame.pack(fill=&quot;x&quot;, padx=5, pady=5) # 간격 띄우기# 파일 추가 기능def add_file(): files = filedialog.askopenfilenames(title=&quot;이미지 파일을 선택하세요&quot;, \\ filetypes=((&quot;PNG 파일&quot;, &quot;*.png&quot;), (&quot;모든 파일&quot;, &quot;*.*&quot;)),\\ initialdir=&quot;C:/&quot; # 최초에 C:/ 경로를 보여줌 ) # 사용자가 선택한 파일 목록 출력 for file in files: list_file.insert(END, file)# 선택 삭제 기능def del_file(): # print(list_file.curselection()) for index in reversed(list_file.curselection()): list_file.delete(index)# 저장 경로 기능def browse_dest_path(): folder_selected = filedialog.askdirectory() if folder_selected is None: # 사용자가 취소를 누를 때 return txt_dest_path.delete(0, END) txt_dest_path.insert(0, folder_selected) # 시작 기능def start(): # 각 옵션들 값을 확인 print(&quot;가로넓이 : &quot;, cmd_width.get()) print(&quot;간격 : &quot;, cmd_space.get()) print(&quot;포맷 : &quot;, cmd_format.get()) # 파일 목록 확인 if list_file.size() == 0: msgbox.showwarning(&quot;경고&quot;, &quot;이미지 파일을 추가하세요&quot;) return # 저장 경로 확인 if len(txt_dest_path.get()) == 0: msgbox.showwarning(&quot;경고&quot;, &quot;저장 경로를 선택하세요&quot;) returnbtn_add_file = Button(file_frame, padx=5, pady=5, width=12, text=&quot;파일추가&quot;, command=add_file)btn_add_file.pack(side=&quot;left&quot;)btn_del_file = Button(file_frame, padx=5, pady=5, width=12, text=&quot;파일삭제&quot;, command=del_file)btn_del_file.pack(side=&quot;right&quot;)# 리스트 프레임list_frame = Frame(root)list_frame.pack(fill=&quot;both&quot;, padx=5, pady=5)scrollbar = Scrollbar(list_frame)scrollbar.pack(side=&quot;right&quot;, fill=&quot;y&quot;)list_file = Listbox(list_frame, selectmode=&quot;extended&quot;, height=15, yscrollcommand=scrollbar.set)list_file.pack(side=&quot;left&quot;, fill=&quot;both&quot;, expand=True)scrollbar.config(command=list_file.yview)# 저장 경로 프레임path_frame = LabelFrame(root, text=&quot;저장경로&quot;)path_frame.pack(fill=&quot;x&quot;, padx=5, pady=5, ipady=5)txt_dest_path = Entry(path_frame)txt_dest_path.pack(side=&quot;left&quot;, fill=&quot;x&quot;, expand=True, padx=5, pady=5, ipady = 4)btn_dest_path = Button(path_frame, text=&quot;찾아보기&quot;, width=10, command=browse_dest_path)btn_dest_path.pack(side=&quot;right&quot;, padx=5, pady=5)# 옵션 프레임frame_option = LabelFrame(root, text=&quot;옵션&quot;)frame_option.pack(padx=5, pady=5, ipady=5)# 1. 가로 넓이 옵션## 가로 넓이 레이블lbl_width = Label(frame_option, text=&quot;가로넓이&quot;, width=8)lbl_width.pack(side=&quot;left&quot;, padx=5, pady=5)## 가로 넓이 콤보opt_width = [&quot;원본유지&quot;, &quot;1024&quot;, &quot;800&quot;, &quot;640&quot;]cmd_width = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_width, width=10)cmd_width.current(0)cmd_width.pack(side=&quot;left&quot;, padx=5, pady=5)# 2. 간격 옵션## 간격 옵션 레이블lbl_space = Label(frame_option, text=&quot;간격&quot;, width=8)lbl_space.pack(side=&quot;left&quot;, padx=5, pady=5)## 간격 옵션 콤보opt_space = [&quot;없음&quot;, &quot;좁게&quot;, &quot;보통&quot;, &quot;넓게&quot;]cmd_space = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_space, width=10)cmd_space.current(0)cmd_space.pack(side=&quot;left&quot;, padx=5, pady=5)# 3. 파일 포맷 옵션## 파일 포맷 옵션 레이블lbl_format = Label(frame_option, text=&quot;포맷&quot;, width=8)lbl_format.pack(side=&quot;left&quot;, padx=5, pady=5)## 파일 포맷 옵션 콤보opt_format = [&quot;PNG&quot;, &quot;JPG&quot;, &quot;BMP&quot;]cmd_format = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_format, width=10)cmd_format.current(0)cmd_format.pack(side=&quot;left&quot;, padx=5, pady=5)# 진행 상황 progress barframe_progress = LabelFrame(root, text=&quot;진행상황&quot;)frame_progress.pack(fill=&quot;x&quot;, padx=5, pady=5, ipady=5)p_var = DoubleVar()progress_bar = ttk.Progressbar(frame_progress, maximum=100, variable=p_var)progress_bar.pack(fill=&quot;x&quot;, padx=5, pady=5)# 실행 프레임frame_run = Frame(root)frame_run.pack(fill=&quot;x&quot;, padx=5, pady=5)btn_close = Button(frame_run, padx=5, pady=5, text=&quot;닫기&quot;, width=12, command=root.quit)btn_close.pack(side=&quot;right&quot;, padx=5, pady=5)btn_start = Button(frame_run, padx=5, pady=5, text=&quot;시작&quot;, width=12, command=start)btn_start.pack(side=&quot;right&quot;, padx=5, pady=5)root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "1.create_layout", "url": "/posts/1_create_layout/", "categories": "Visual_Studio, GUI_project", "tags": "GUI, python, Visual_Studio", "date": "2021-12-29 03:45:00 +0900", "snippet": "project여러 이미지를 합치는 프로그램을 만드시오[사용자 시나리오]1. 사용자는 합치려는 이미지를 1개 이상 선택한다2. 합쳐진 이미지가 저장될 경로를 지정한다.3. 가로넓이, 간격, 포맷 옵션을 지정한다.4. 시작 버튼을 통해 이미지를 합친다.5. 닫기 버튼을 통해 프로그램을 종료한다.[기능명세]1. 파일추가 : 리스트 박스에 파일 추가2. 선택삭제 : 리스트 박스에서 선택된 항목 삭제3. 찾아보기 : 저장 폴더를 선택하면 텍스트 위젯에 입력4. 가로넓이 : 이미지 넓이 지정(원본유지, 1024, 800, 640)5. 간격 : 이미지 간의 간격 지정 (없음, 좁게, 보통, 넓게)6. 포맷 : 저장 이미지 포맷 지정 (png, jpg, bmp)7. 시작 : 이미지 합치기 작업 실행8. 진행상황 : 현재 진행중인 파일 순서에 맞게 반영9. 닫기 : 프로그램 종료1. create_layoutfrom tkinter import *import tkinter.ttk as ttkroot = Tk()root.title(&quot;Nado GUI&quot;) # 제목# root.geometry(&quot;640x480&quot;) # 가로 x 세로# 파일 프레임 (파일 추가, 선택 삭제)file_frame = Frame(root)file_frame.pack(fill=&quot;x&quot;, padx=5, pady=5) # 간격 띄우기btn_add_file = Button(file_frame, padx=5, pady=5, width=12, text=&quot;파일추가&quot;)btn_add_file.pack(side=&quot;left&quot;)btn_del_file = Button(file_frame, padx=5, pady=5, width=12, text=&quot;파일삭제&quot;)btn_del_file.pack(side=&quot;right&quot;)# 리스트 프레임list_frame = Frame(root)list_frame.pack(fill=&quot;both&quot;, padx=5, pady=5)scrollbar = Scrollbar(list_frame)scrollbar.pack(side=&quot;right&quot;, fill=&quot;y&quot;)list_file = Listbox(list_frame, selectmode=&quot;extended&quot;, height=15, yscrollcommand=scrollbar.set)list_file.pack(side=&quot;left&quot;, fill=&quot;both&quot;, expand=True)scrollbar.config(command=list_file.yview)# 저장 경로 프레임path_frame = LabelFrame(root, text=&quot;저장경로&quot;)path_frame.pack(fill=&quot;x&quot;, padx=5, pady=5, ipady=5)txt_dest_path = Entry(path_frame)txt_dest_path.pack(side=&quot;left&quot;, fill=&quot;x&quot;, expand=True, padx=5, pady=5, ipady = 4)btn_dest_path = Button(path_frame, text=&quot;찾아보기&quot;, width=10)btn_dest_path.pack(side=&quot;right&quot;, padx=5, pady=5)# 옵션 프레임frame_option = LabelFrame(root, text=&quot;옵션&quot;)frame_option.pack(padx=5, pady=5, ipady=5)# 1. 가로 넓이 옵션## 가로 넓이 레이블lbl_width = Label(frame_option, text=&quot;가로넓이&quot;, width=8)lbl_width.pack(side=&quot;left&quot;, padx=5, pady=5)## 가로 넓이 콤보opt_width = [&quot;원본유지&quot;, &quot;1024&quot;, &quot;800&quot;, &quot;640&quot;]cmd_width = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_width, width=10)cmd_width.current(0)cmd_width.pack(side=&quot;left&quot;, padx=5, pady=5)# 2. 간격 옵션## 간격 옵션 레이블lbl_space = Label(frame_option, text=&quot;간격&quot;, width=8)lbl_space.pack(side=&quot;left&quot;, padx=5, pady=5)## 간격 옵션 콤보opt_space = [&quot;없음&quot;, &quot;좁게&quot;, &quot;보통&quot;, &quot;넓게&quot;]cmd_space = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_space, width=10)cmd_space.current(0)cmd_space.pack(side=&quot;left&quot;, padx=5, pady=5)# 3. 파일 포맷 옵션## 파일 포맷 옵션 레이블lbl_format = Label(frame_option, text=&quot;포맷&quot;, width=8)lbl_format.pack(side=&quot;left&quot;, padx=5, pady=5)## 파일 포맷 옵션 콤보opt_format = [&quot;PNG&quot;, &quot;JPG&quot;, &quot;BMP&quot;]cmd_format = ttk.Combobox(frame_option, state=&quot;readonly&quot;, values=opt_format, width=10)cmd_format.current(0)cmd_format.pack(side=&quot;left&quot;, padx=5, pady=5)# 진행 상황 progress barframe_progress = LabelFrame(root, text=&quot;진행상황&quot;)frame_progress.pack(fill=&quot;x&quot;, padx=5, pady=5, ipady=5)p_var = DoubleVar()progress_bar = ttk.Progressbar(frame_progress, maximum=100, variable=p_var)progress_bar.pack(fill=&quot;x&quot;, padx=5, pady=5)# 실행 프레임frame_run = Frame(root)frame_run.pack(fill=&quot;x&quot;, padx=5, pady=5)btn_close = Button(frame_run, padx=5, pady=5, text=&quot;닫기&quot;, width=12, command=root.quit)btn_close.pack(side=&quot;right&quot;, padx=5, pady=5)btn_start = Button(frame_run, padx=5, pady=5, text=&quot;시작&quot;, width=12)btn_start.pack(side=&quot;right&quot;, padx=5, pady=5)root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "15.quiz", "url": "/posts/15_quiz/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:45:00 +0900", "snippet": "quiztkinter 를 이용한 메모장 프로그램을 만드시오조건1. title : 제목 없음 - windows 메모장2. 메뉴 : 파일, 편집, 서식, 보기, 도움말3. 실제 메뉴 구현 : 파일 메뉴 내에서 열기, 저장, 끝내기 3개만 처리3-1 열기 : mynote.txt 파일 내용 열어서 보여주기3-2 저장 : mynote.txt 파일에 현재 내용 저장하기4. 프로그램 시작 시 본문은 비어 있는 상태5. 하단 status 바는 필요없음6. 프로그램 크기, 위치는 자유롭게 하되 크기 조정 가능해야 함7. 본문 우측에 상하 스크롤 바 넣기from tkinter import *import osroot = Tk()root.title(&quot;제목 없음 - Windows 메모장&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# 스크롤 바scrollbar = Scrollbar(root)scrollbar.pack(side=&quot;right&quot;, fill=&quot;y&quot;)txt = Text(root, yscrollcommand=scrollbar.set)txt.pack(side=&quot;left&quot;, fill=&quot;both&quot;, expand=True)scrollbar.config(command=txt.yview)# 메뉴filename = &quot;mynote.txt&quot;def open_file(): if os.path.isfile(filename): # 파일 있으면 true, 없으면 false with open(filename, &quot;r&quot;, encoding=&quot;utf8&quot;) as file: txt.delete(&quot;1.0&quot;, END) # 텍스트 위젯 본문 삭제 txt.insert(END, file.read()) # 파일 내용을 본문에 입력 def save_file(): with open(filename, &quot;w&quot;, encoding=&quot;utf8&quot;) as file: file.write(txt.get(&quot;1.0&quot;, END)) # 모든 내용을 가져와서 저장 menu = Menu(root)# 파일 메뉴menu_file = Menu(menu, tearoff=0)menu_file.add_command(label=&quot;열기&quot;, command=open_file)menu_file.add_command(label=&quot;저장&quot;, command=save_file)menu_file.add_separator() # 구분 짓기 위한 구분자menu_file.add_command(label=&quot;끝내기&quot;, command=root.quit)menu.add_cascade(label=&quot;파일&quot;, menu=menu_file)# 편집 메뉴 (빈 값)menu.add_cascade(label=&quot;편집&quot;)# 서식 메뉴 (빈 값)menu.add_cascade(label=&quot;서식&quot;)# 보기 메뉴 (빈 값)menu.add_cascade(label=&quot;보기&quot;)# 도움말 메뉴 (빈 값)menu.add_cascade(label=&quot;도움말&quot;)root.config(menu=menu)root.resizable(True, True) root.mainloop()" }, { "title": "14.grid", "url": "/posts/14_grid/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:43:00 +0900", "snippet": "gridfrom tkinter import *from typing import Listroot = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표# btn1 = Button(root, text=&quot;버튼1&quot;)# btn2 = Button(root, text=&quot;버튼2&quot;)# # btn1.pack()# # btn2.pack()# # btn1.pack(side=&quot;left&quot;)# # btn2.pack(side=&quot;right&quot;)# btn1.grid(row=0, column=0)# btn2.grid(row=1, column=1)################################################################################################################### 맨 윗줄btn_f16 = Button(root, text=&quot;F16&quot;, width=5, height=2)btn_f17 = Button(root, text=&quot;F17&quot;, width=5, height=2)btn_f18 = Button(root, text=&quot;F18&quot;, width=5, height=2)btn_f19 = Button(root, text=&quot;F19&quot;, width=5, height=2)btn_f16.grid(row=0, column=0, sticky=N+E+W+S, padx=3, pady=3) # sticky 동서남북으로 크기를 늘려줌btn_f17.grid(row=0, column=1, sticky=N+E+W+S, padx=3, pady=3)btn_f18.grid(row=0, column=2, sticky=N+E+W+S, padx=3, pady=3)btn_f19.grid(row=0, column=3, sticky=N+E+W+S, padx=3, pady=3)# clear 줄btn_clear = Button(root, text=&quot;clear&quot;, width=5, height=2)btn_equal = Button(root, text=&quot;=&quot;, width=5, height=2)btn_div = Button(root, text=&quot;/&quot;, width=5, height=2)btn_mul = Button(root, text=&quot;*&quot;, width=5, height=2)btn_clear.grid(row=1, column=0, sticky=N+E+W+S, padx=3, pady=3)btn_equal.grid(row=1, column=1, sticky=N+E+W+S, padx=3, pady=3)btn_div.grid(row=1, column=2, sticky=N+E+W+S, padx=3, pady=3)btn_mul.grid(row=1, column=3, sticky=N+E+W+S, padx=3, pady=3)# 7 시작 줄btn_7 = Button(root, text=&quot;7&quot;, width=5, height=2)btn_8 = Button(root, text=&quot;8&quot;, width=5, height=2)btn_9 = Button(root, text=&quot;9&quot;, width=5, height=2)btn_sub = Button(root, text=&quot;-&quot;, width=5, height=2)btn_7.grid(row=2, column=0, sticky=N+E+W+S, padx=3, pady=3)btn_8.grid(row=2, column=1, sticky=N+E+W+S, padx=3, pady=3)btn_9.grid(row=2, column=2, sticky=N+E+W+S, padx=3, pady=3)btn_sub.grid(row=2, column=3, sticky=N+E+W+S, padx=3, pady=3)# 4 시작 줄btn_4 = Button(root, text=&quot;4&quot;, width=5, height=2)btn_5 = Button(root, text=&quot;5&quot;, width=5, height=2)btn_6 = Button(root, text=&quot;6&quot;, width=5, height=2)btn_add = Button(root, text=&quot;+&quot;, width=5, height=2)btn_4.grid(row=3, column=0, sticky=N+E+W+S, padx=3, pady=3)btn_5.grid(row=3, column=1, sticky=N+E+W+S, padx=3, pady=3)btn_6.grid(row=3, column=2, sticky=N+E+W+S, padx=3, pady=3)btn_add.grid(row=3, column=3, sticky=N+E+W+S, padx=3, pady=3)# 1 시작 줄btn_1 = Button(root, text=&quot;1&quot;, width=5, height=2)btn_2 = Button(root, text=&quot;2&quot;, width=5, height=2)btn_3 = Button(root, text=&quot;3&quot;, width=5, height=2)btn_enter = Button(root, text=&quot;enter&quot;, width=5, height=2) # 세로로 합쳐짐btn_1.grid(row=4, column=0, sticky=N+E+W+S, padx=3, pady=3)btn_2.grid(row=4, column=1, sticky=N+E+W+S, padx=3, pady=3)btn_3.grid(row=4, column=2, sticky=N+E+W+S, padx=3, pady=3)btn_enter.grid(row=4, column=3, rowspan=2, sticky=N+E+W+S, padx=3, pady=3) # 현재 위치로부터 아래쪽으로 몇 칸 더함# 0 시작 줄btn_0 = Button(root, text=&quot;0&quot;, width=5, height=2)btn_point = Button(root, text=&quot;.&quot;, width=5, height=2)btn_0.grid(row=5, column=0, columnspan=2, sticky=N+E+W+S, padx=3, pady=3) # 현재 위치로부터 오른쪽으로 몇 칸 더함btn_point.grid(row=5, column=2, sticky=N+E+W+S, padx=3, pady=3)root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "13.scrollbar", "url": "/posts/13_scrollbar/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:42:00 +0900", "snippet": "scrollbarfrom tkinter import *from typing import Listroot = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표frame = Frame(root)frame.pack()scrollbar = Scrollbar(frame)scrollbar.pack(side=&quot;right&quot;, fill=&quot;y&quot;)# set이 없으면 스크롤을 내려도 다시 올라옴listbox = Listbox(frame, selectmode=&quot;extended&quot;, height=10, yscrollcommand=scrollbar.set)for i in range(1, 32): listbox.insert(END, str(i) + &quot;일&quot;)listbox.pack(side=&quot;left&quot;) scrollbar.config(command=listbox.yview)root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "12.frame", "url": "/posts/12_frame/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:41:00 +0900", "snippet": "framefrom tkinter import *root = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표Label(root, text=&quot;메뉴를 선택해 주세요&quot;).pack(side=&quot;top&quot;)Button(root, text=&quot;주문하기&quot;).pack(side=&quot;bottom&quot;)# 메뉴 프레임frame_burger = Frame(root, relief=&quot;solid&quot;, bd=1)frame_burger.pack(side=&quot;left&quot;, fill=&quot;both&quot;, expand=True)Button(frame_burger, text=&quot;햄버거&quot;).pack()Button(frame_burger, text=&quot;치즈버거&quot;).pack()Button(frame_burger, text=&quot;치킨버거&quot;).pack()# 음료 프레임frame_drink = LabelFrame(root, text=&quot;음료&quot;)frame_drink.pack(side=&quot;right&quot;, fill=&quot;both&quot;, expand=True)Button(frame_drink, text=&quot;콜라&quot;).pack()Button(frame_drink, text=&quot;사이다&quot;).pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "11.messagebox", "url": "/posts/11_messagebox/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:40:00 +0900", "snippet": "messageboxfrom tkinter import *import tkinter.messagebox as msgboxroot = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표# 기차 예매 시스템이라고 가정def info(): msgbox.showinfo(&quot;알림&quot;, &quot;정상적을 예매 완료되었습니다.&quot;)def warn(): msgbox.showwarning(&quot;경고&quot;, &quot;해당 좌석은 매진되었습니다.&quot;)def error(): msgbox.showerror(&quot;에러&quot;, &quot;결제 오류가 발생했습니다.&quot;)def okcancel(): msgbox.askokcancel(&quot;확인 / 취소&quot;, &quot;해당 좌석은 유아동반석입니다. 예매하시겠습니까?&quot;) def retrycancel(): response =msgbox.askretrycancel(&quot;재시도 / 취소&quot;, &quot;일시적인 오류 입니다. 다시 시도하시겠습니까?&quot;) print(&quot;응답:&quot;, response) if response == 1: print(&quot;재시도&quot;) elif response == 0: print(&quot;취소&quot;) def yesno(): msgbox.askyesno(&quot;예 / 아니오&quot;, &quot;해당 좌석은 역방향입니다. 예매하시겠습니까?&quot;) def yesnocancel(): response = msgbox.askyesnocancel(title=None, message=&quot;예매 내역이 저장되지 않았습니다. 저장 후 프로그램을 종료 하시겠습니까?&quot;) # 네 : 저장 후 종료 # 아니오 : 저장하지 않고 종료 # 취소 : 프로그램 종료 취소 (현재 화면에서 계속 작업) print(&quot;응답:&quot;, response) if response == 1: print(&quot;예&quot;) elif response == 0: print(&quot;아니오&quot;) else: print(&quot;취소&quot;) Button(root, command=info, text=&quot;알림&quot;).pack()Button(root, command=warn, text=&quot;경고&quot;).pack()Button(root, command=error, text=&quot;에러&quot;).pack()Button(root, command=okcancel, text=&quot;확인 취소&quot;).pack()Button(root, command=retrycancel, text=&quot;재시도 취소&quot;).pack()Button(root, command=yesno, text=&quot;예 아니오&quot;).pack()Button(root, command=yesnocancel, text=&quot;예 아니오 취소&quot;).pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "10.menu", "url": "/posts/10_menu/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:39:00 +0900", "snippet": "menufrom tkinter import *root = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표def create_new_file(): print(&quot;새 파일을 만듭니다.&quot;)menu = Menu(root)# File 메뉴menu_file = Menu(menu, tearoff=0)menu_file.add_command(label=&quot;New File&quot;, command=create_new_file)menu_file.add_command(label=&quot;New Window&quot;)menu_file.add_separator() # 구분 짓기 위한 구분자menu_file.add_command(label=&quot;Open File...&quot;)menu_file.add_command(label=&quot;Open Folder...&quot;)menu_file.add_separator() # 구분 짓기 위한 구분자menu_file.add_command(label=&quot;Save All&quot;, state=&quot;disable&quot;) # 비활성화menu_file.add_command(label=&quot;Exit&quot;, command=root.quit)menu.add_cascade(label=&quot;File&quot;, menu=menu_file)# Edit 메뉴 (빈 값)menu.add_cascade(label=&quot;Edit&quot;)# Language 메뉴 추가 (radio 버튼을 통해서 택 1)menu_lang = Menu(menu, tearoff=0)menu_lang.add_radiobutton(label=&quot;Python&quot;)menu_lang.add_radiobutton(label=&quot;Java&quot;)menu_lang.add_radiobutton(label=&quot;C++&quot;)menu.add_cascade(label=&quot;Language&quot;, menu=menu_lang)# View 메뉴menu_view = Menu(menu, tearoff=0)menu_view.add_checkbutton(label=&quot;Show Minimap&quot;)menu.add_cascade(label=&quot;View&quot;, menu=menu_view)root.config(menu=menu)root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "9.progressbar", "url": "/posts/9_progressbar/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:38:00 +0900", "snippet": "progressbarfrom tkinter import *import tkinter.ttk as ttkimport timeroot = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표# # progressbar = ttk.Progressbar(root, maximum=100, mode=&quot;indeterminate&quot;) indeterminate는 언제 끝날지 모를때# progressbar = ttk.Progressbar(root, maximum=100, mode=&quot;determinate&quot;) # determinate는 점점 채워짐# progressbar.start(10) # 10ms 마다 움직임 # progressbar.pack()# def btncmd():# progressbar.stop() # 작동 중지# btn = Button(root, text=&quot;중지&quot;, command=btncmd)# btn.pack()p_var2 = DoubleVar()progressbar2 = ttk.Progressbar(root, maximum=100, length=150, variable=p_var2)progressbar2.pack()def btncmd2(): for i in range(1, 101): # 1 ~ 100 time.sleep(0.01) # 0.01초 대기 p_var2.set(i) # progress bar의 값 설정 progressbar2.update() # UI 업데이트 print(p_var2.get())btn = Button(root, text=&quot;시작&quot;, command=btncmd2)btn.pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "8.combobox", "url": "/posts/8_combobox/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:37:00 +0900", "snippet": "comboboxfrom tkinter import *import tkinter.ttk as ttkroot = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표values = [str(i) + &quot;일&quot; for i in range(1, 32)]combobox = ttk.Combobox(root, height=5, values=values)combobox.pack()combobox.set(&quot;카드 결제일&quot;) # 최초 목록 제목 설정readonly_combobox = ttk.Combobox(root, height=10, values=values, state=&quot;readonly&quot;)readonly_combobox.current(0) # 0번째 인덱스 값 선택readonly_combobox.pack()def btncmd(): print(combobox.get()) print(readonly_combobox.get())btn = Button(root, text=&quot;선택&quot;, command=btncmd)btn.pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "7.radiobutton", "url": "/posts/7_radiobutton/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:36:00 +0900", "snippet": "radiobuttonfrom tkinter import *from typing import Listroot = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표Label(root, text=&quot;메뉴를 선택하세요&quot;).pack()burger_var = IntVar() # int형으로 값을 저장한다.btn_buger1 = Radiobutton(root, text=&quot;햄버거&quot;, value=1, variable=burger_var)btn_buger1.select()btn_buger2 = Radiobutton(root, text=&quot;치즈버거&quot;, value=2, variable=burger_var)btn_buger3 = Radiobutton(root, text=&quot;치킨버거&quot;, value=3, variable=burger_var)btn_buger1.pack()btn_buger2.pack()btn_buger3.pack()Label(root, text=&quot;음료를 선택하세요&quot;).pack()drink_var = StringVar()btn_drink1 = Radiobutton(root, text=&quot;콜라&quot;, value=&quot;콜라&quot;, variable=drink_var)btn_drink1.select() # 기본값 선택btn_drink2 = Radiobutton(root, text=&quot;사이다&quot;, value=&quot;사이다&quot;, variable=drink_var)btn_drink3 = Radiobutton(root, text=&quot;환타&quot;, value=&quot;환타&quot;, variable=drink_var)btn_drink1.pack()btn_drink2.pack()btn_drink3.pack()def btncmd(): print(burger_var.get()) # 햄버거 중 선택된 라디오 항목의 값을 출력 print(drink_var.get())btn = Button(root, text=&quot;주문&quot;, command=btncmd)btn.pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "6.checkbox", "url": "/posts/6_checkbox/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:35:00 +0900", "snippet": "checkboxfrom tkinter import *from typing import Listroot = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표check_val = IntVar() # check_var에 int형으로 값을 저장한다checkbox = Checkbutton(root, text=&quot;오늘 하루 보지 않기&quot;, variable=check_val)# checkbox.select() # 자동 선택 처리# checkbox.deselect() # 선택 해제 처리checkbox.pack()check_val2 = IntVar()checkbox2 = Checkbutton(root, text=&quot;일주일동안 보지 않기&quot;, variable=check_val2)checkbox2.pack()def btncmd(): print(check_val.get()) # 0 : 체크해제, 1 : 체크 print(check_val2.get())btn = Button(root, text=&quot;클릭&quot;, command=btncmd)btn.pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "5.listbox", "url": "/posts/5_listbox/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:34:00 +0900", "snippet": "listboxfrom tkinter import *from typing import Listroot = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표listbox = Listbox(root, selectmode=&quot;extended&quot;, height=0)listbox.insert(0, &quot;사과&quot;)listbox.insert(1, &quot;딸기&quot;)listbox.insert(2, &quot;바나나&quot;)listbox.insert(END, &quot;수박&quot;)listbox.insert(END, &quot;포도&quot;)listbox.pack()def btncmd(): # 삭제 # listbox.delete(0) # 맨 앞 항목을 삭제 END는 맨 뒤에 항목을 삭제 # 갯수 확인 # print(&quot;리스트에는&quot;, listbox.size(), &quot;개가 있어요&quot;) # 항목 확인 # print(&quot;1번째부터 3번째까지의 항목 : &quot;, listbox.get(0, 2)) # 선택된 항목 확인 (위치로 반환 ex 1,2,3) print(&quot;선택된 항목 : &quot;, listbox.curselection())btn = Button(root, text=&quot;클릭&quot;, command=btncmd)btn.pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "4.text_entry", "url": "/posts/4_text_entry/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:33:00 +0900", "snippet": "text_entryfrom tkinter import *root = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표txt = Text(root, width=30, height=5)txt.pack()txt.insert(END, &quot;글자를 입력하세요&quot;)e = Entry(root, width=30)e.pack()e.insert(0, &quot;한 줄만 입력해요&quot;)def btncmd(): # 내용 출력 print(txt.get(&quot;1.0&quot;, END)) # 1 : 첫번째 라인, 0 : column 위치 print(e.get()) # 내용 삭제 txt.delete(&quot;1.0&quot;, END) e.delete(0, END)btn = Button(root, text=&quot;클릭&quot;, command=btncmd)btn.pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "3.label", "url": "/posts/3_label/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:32:00 +0900", "snippet": "labelfrom tkinter import *root = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표label1 = Label(root, text=&quot;안녕하세요&quot;)label1.pack()photo = PhotoImage(file=&quot;gui_basic/img.png&quot;)label2 = Label(root, image=photo)label2.pack()def change(): label1.config(text=&quot;또 만나요&quot;) global photo2 # 함수 내에서 이미지 값 등을 바꾸기 위해 전역 변수로 선언 photo2 = PhotoImage(file=&quot;gui_basic/x.png&quot;) label2.config(image=photo2)btn = Button(root, text=&quot;클릭&quot;, command=change)btn.pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "2.button", "url": "/posts/2_button/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:31:00 +0900", "snippet": "buttonfrom tkinter import *root = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표btn1 = Button(root, text=&quot;버튼1&quot;)btn1.pack()btn2 = Button(root, padx=5, pady=10, text=&quot;버튼1&quot;)btn2.pack()btn3 = Button(root, padx=10, pady=5, text=&quot;버튼1&quot;)btn3.pack()btn4 = Button(root, width=10, height=3, text=&quot;버튼4&quot;)btn4.pack()btn5 = Button(root, fg=&quot;red&quot;, bg=&quot;yellow&quot;, text=&quot;버튼5&quot;)btn5.pack()photo = PhotoImage(file=&quot;gui_basic/img.png&quot;)btn6 = Button(root, image=photo)btn6.pack()def btncmd(): print(&quot;버튼이 클릭되었어요&quot;)btn7 = Button(root, text=&quot;동작하는 버튼&quot;, command=btncmd)btn7.pack()root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "1.create_frame", "url": "/posts/1_create_frame/", "categories": "Visual_Studio, GUI", "tags": "GUI, python, Visual_Studio", "date": "2021-12-28 03:30:00 +0900", "snippet": "create_framefrom tkinter import *root = Tk()root.title(&quot;GUI&quot;) # 제목root.geometry(&quot;640x480&quot;) # 가로 x 세로# root.geometry(&quot;640x480+300+100&quot;) # 가로 x 세로 + x좌표 + y좌표root.resizable(False, False) # x(너비), y(높이) 값 변경 불가 (창 크기 변경 불가)root.mainloop()" }, { "title": "pygame_project", "url": "/posts/project/", "categories": "Visual_Studio, pygame_project", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "pygame_project# 오락실 Pang 게임 만들기# [게임 조건]# 1. 캐릭터는 화면 아래에 위치, 좌우로만 이동 가능# 2. 스페이스를 누르면 무기를 쏘아 올림# 3. 큰 공 1개가 나타나서 바운스# 4. 무기에 닿으면 공은 작은 크기 2개로 분할, 가장 작은 크기의 공은 사라짐# 5. 모든 공을 없애면 게임 종료(성공)# 6. 캐릭터는 공에 닿으면 게임 종료 (실패)# 7. 시간 제한 99초 초과 시 게임 종료 (실패)# 8. FPS 는 30으로 고정 (필요시 SPEED 값을 조정)# [게임 이미지]# 1. 배경 : 640 * 480 (가로 세로)# 2. 무대 : 640 * 50# 3. 캐릭터 : 33 * 60# 4. 무기 : 30 * 430# 5. 공 : 160 * 160, 80 * 80, 40 * 40, 20 * 20# 1. 모든 공을 없애면 게임 종료(성공)# 2. 캐릭터는 공에 닿으면 게임 종료 (실패)# 3. 시간 제한 99초 초과 시 게임 종료 (실패)import pygameimport os############################################################## 기본 초기화 (반드시 해야 하는 것들)pygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 640 # 가로 크기screen_height = 480 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;Pang&quot;) # 게임 이름# FPSclock = pygame.time.Clock()############################################################## 1. 사용자 게임 초기화 (배경 화면, 게임 이미지, 좌표, 속도, 폰트 등)current_path = os.path.dirname(__file__) # 현재 파일의 위치 반환image_path = os.path.join(current_path, &quot;images&quot;) # images 폴더 위치 반환# 배경 만들기background = pygame.image.load(os.path.join(image_path, &quot;white.png&quot;))# 스테이지 만들기stage = pygame.image.load(os.path.join(image_path, &quot;stage.png&quot;))stage_size = stage.get_rect().sizestage_height = stage_size[1] # 스테이지의 높이 위에 캐릭터를 두기 위해 사용# 캐릭터 만들기character = pygame.image.load(os.path.join(image_path, &quot;character.png&quot;))character_size = character.get_rect().sizecharacter_width = character_size[0]character_height = character_size[1]character_x_pos = (screen_width / 2) - (character_width / 2)character_y_pos = screen_height - character_height - stage_height# 캐릭터 이동 방향character_to_x = 0# 캐릭터 이동 속도character_speed = 5# 무기 만들기weapon = pygame.image.load(os.path.join(image_path, &quot;weapon.png&quot;))weapon_size = weapon.get_rect().sizeweapon_width = weapon_size[0]# 무기는 한 번에 여러 발 발사 가능weapons = []# 무기 이동 속도weapon_speed = 10# 공 만들기 (4개 크기에 대해 따로 처리)ball_images = [ pygame.image.load(os.path.join(image_path, &quot;balloon1.png&quot;)), pygame.image.load(os.path.join(image_path, &quot;balloon2.png&quot;)), pygame.image.load(os.path.join(image_path, &quot;balloon3.png&quot;)), pygame.image.load(os.path.join(image_path, &quot;balloon4.png&quot;))]# 공 크기에 따른 최초 스피드ball_speed_y = [-18, -15, -12, -9] # index 0, 1, 2, 3 에 해당하는 값 ex) -18 = balloon1의 속도# 공들balls = []balls.append({ &quot;pos_x&quot;: 50, # 공의 x 좌표 &quot;pos_y&quot;: 50, # 공의 y 좌표 &quot;img_idx&quot;: 0, # 공의 이미지 인덱스 &quot;to_x&quot;: 3, # x축 이동방향, -3이면 왼쪽으로 3이면 오른쪽으로 &quot;to_y&quot;: -6, # y축 이동방향 &quot;init_spd_y&quot; : ball_speed_y[0]}) # y 최초 속도# 사라질 무기, 공 정보 저장 변수weapon_to_remove = -1ball_to_remove = -1# Font 정의game_font = pygame.font.Font(None, 40)total_time = 100start_ticks = pygame.time.get_ticks() # 시작 시간 정의# 게임 종료 메시지 game_result = &quot;Game Over&quot;running = True # 게임이 진행중인가?while running: dt = clock.tick(30) # 게임화면의 초당 프레임 수를 설정 # print(&quot;fps : &quot;+ str(clock.get_fps())) # 2. 이벤트 처리 (키보드, 마우스 등) for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님 if event.type == pygame.KEYDOWN: if event.key == pygame.K_LEFT: # 캐릭터를 왼쪽으로 character_to_x -= character_speed elif event.key == pygame.K_RIGHT: # 캐릭터를 오른쪽으로 character_to_x += character_speed elif event.key == pygame.K_SPACE: # 무기 발사 weapon_x_pos = character_x_pos + (character_width / 2) - (weapon_width / 2) weapon_y_pos = character_y_pos weapons.append([weapon_x_pos, weapon_y_pos]) if event.type == pygame.KEYUP: if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT: character_to_x = 0 # 3. 게임 캐릭터 위치 정의 character_x_pos += character_to_x if character_x_pos &amp;lt; 0: character_x_pos = 0 elif character_x_pos &amp;gt; screen_width - character_width: character_x_pos = screen_width - character_width # 무기 위치 조정 weapons = [[w[0], w[1] - weapon_speed] for w in weapons] # 무기 위치를 위로 보냄 # 천장에 닿은 무기 없애기 weapons = [ [w[0], w[1]] for w in weapons if w[1] &amp;gt; 0] # 공 위치 정의 for ball_idx, ball_val in enumerate(balls): ball_pos_x = ball_val[&quot;pos_x&quot;] ball_pos_y = ball_val[&quot;pos_y&quot;] ball_img_idx = ball_val[&quot;img_idx&quot;] ball_size = ball_images[ball_img_idx].get_rect().size ball_width = ball_size[0] ball_height = ball_size[1] # 가로벽에 닿았을 때 공 이동 위치 변경 (튕겨 나오는 효과) if ball_pos_x &amp;lt; 0 or ball_pos_x &amp;gt; screen_width - ball_width: ball_val[&quot;to_x&quot;] = ball_val[&quot;to_x&quot;] * -1 # 세로 위치 # 스테이지에 튕겨서 올라가는 처리 if ball_pos_y &amp;gt;= screen_height - stage_height - ball_height: ball_val[&quot;to_y&quot;] = ball_val[&quot;init_spd_y&quot;] else: # 그 외의 모든 경우에는 속도를 증가 ball_val[&quot;to_y&quot;] += 0.5 ball_val[&quot;pos_x&quot;] += ball_val[&quot;to_x&quot;] ball_val[&quot;pos_y&quot;] += ball_val[&quot;to_y&quot;] # 4. 충돌 처리 # 캐릭터 rect 정보 업데이트 character_rect = character.get_rect() character_rect.left = character_x_pos character_rect.top = character_y_pos for ball_idx, ball_val in enumerate(balls): ball_pos_x = ball_val[&quot;pos_x&quot;] ball_pos_y = ball_val[&quot;pos_y&quot;] ball_img_idx = ball_val[&quot;img_idx&quot;] # 공 rect 정보 업데이트 ball_rect = ball_images[ball_img_idx].get_rect() ball_rect.left = ball_pos_x ball_rect.top = ball_pos_y # 공과 캐릭터 충돌 체크 if character_rect.colliderect(ball_rect): running = False break # 공과 무기들 충돌 처리 for weapon_idx, weapon_val in enumerate(weapons): weapon_pos_x = weapon_val[0] weapon_pos_y = weapon_val[1] # 무기 rect 정보 업데이트 weapon_rect = weapon.get_rect() weapon_rect.left = weapon_pos_x weapon_rect.top = weapon_pos_y # 충돌 체크 if weapon_rect.colliderect(ball_rect): weapon_to_remove = weapon_idx # 해당 무기 없애기 위한 값 설정 ball_to_remove = ball_idx # 해당 공 없애기 위한 값 설정 # 가장 작은 크기의 공이 아니라면 다음 단계의 공으로 쪼개기 if ball_img_idx &amp;lt; 3: # 현재 공 크기 정보를 가지고 옴 ball_width = ball_rect.size[0] ball_height = ball_rect.size[1] # 나눠진 공 정보 small_ball_rect = ball_images[ball_img_idx + 1].get_rect() small_ball_width = small_ball_rect.size[0] small_ball_height = small_ball_rect.size[1] # 왼쪽으로 튕겨나가는 작은 공 balls.append({ &quot;pos_x&quot;: ball_pos_x + (ball_width / 2) - (small_ball_width / 2), # 공의 x 좌표 &quot;pos_y&quot;: ball_pos_y + (ball_height / 2) - (small_ball_height / 2), # 공의 y 좌표 &quot;img_idx&quot;: ball_img_idx + 1, # 공의 이미지 인덱스 &quot;to_x&quot;: -3, # x축 이동방향, -3이면 왼쪽으로 3이면 오른쪽으로 &quot;to_y&quot;: -6, # y축 이동방향 &quot;init_spd_y&quot; : ball_speed_y[ball_img_idx + 1]}) # y 최초 속도 # 오른쪽으로 튕겨나가는 작은 공 balls.append({ &quot;pos_x&quot;: ball_pos_x + (ball_width / 2) - (small_ball_width / 2), # 공의 x 좌표 &quot;pos_y&quot;: ball_pos_y + (ball_height / 2) - (small_ball_height / 2), # 공의 y 좌표 &quot;img_idx&quot;: ball_img_idx + 1, # 공의 이미지 인덱스 &quot;to_x&quot;: 3, # x축 이동방향, -3이면 왼쪽으로 3이면 오른쪽으로 &quot;to_y&quot;: -6, # y축 이동방향 &quot;init_spd_y&quot; : ball_speed_y[ball_img_idx + 1]}) # y 최초 속도 break else: # 계속 게임을 진행 continue # 안쪽 for 문 조건이 맞지 않으면 continue. 바깥 for문 계속 수행 break # 안쪽 for 문에서 break를 만나면 여기로 진입가능 2중 for문을 한번에 탈출 # 충돌된 공 or 무기 없애기 if ball_to_remove &amp;gt; -1: del balls[ball_to_remove] ball_to_remove = -1 if weapon_to_remove &amp;gt; -1: del weapons[weapon_to_remove] weapon_to_remove = -1 # 모든 공을 없앤 경우 게임 종료 (성공) if len(balls) == 0: game_result = &quot;Mission Complete&quot; running = False # 5. 화면에 그리기 screen.blit(background, (0, 0)) for weapon_x_pos, weapon_y_pos in weapons: screen.blit(weapon, (weapon_x_pos, weapon_y_pos)) for idx, val in enumerate(balls): ball_pos_x = val[&quot;pos_x&quot;] ball_pos_y = val[&quot;pos_y&quot;] ball_img_idx = val[&quot;img_idx&quot;] screen.blit(ball_images[ball_img_idx], (ball_pos_x, ball_pos_y)) screen.blit(stage, (0, screen_height - stage_height)) screen.blit(character, (character_x_pos, character_y_pos)) # 경과 시간 계산 elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000 timer = game_font.render(&quot;Time : {}&quot;.format(int(total_time - elapsed_time)), True, (255, 255, 0)) screen.blit(timer, (10, 10)) # 시간 초과했다면 if total_time - elapsed_time &amp;lt;= 0: game_result = &quot;Time Over&quot; running = False pygame.display.update() # 게임화면을 다시 그리기! pygame# 게임 오버 메시지msg = game_font.render(game_result, True, (255, 255, 0)) # 노란색msg_rect = msg.get_rect(center=(int(screen_width / 2), int(screen_height / 2)))screen.blit(msg, msg_rect)pygame.display.update()# 2초 대기pygame.time.delay(2000)# pygame 종료pygame.quit()" }, { "title": "9. game", "url": "/posts/9_game/", "categories": "Visual_Studio, pygame_basic", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "game# 하늘에서 떨어지는 똥 피하기 게임# 게임 조건# 1. 캐릭터는 화면 가장 아래에 위치, 좌우로만 이동 가능# 2. 똥은 화면 가장 위에서 떨어짐. x 좌표는 매번 랜덤으로 설정# 3. 캐릭터가 똥을 피하면 다음 똥이 다시 떨어짐# 4. 캐릭터가 똥과 충돌하면 게임 종료# 5. FPS는 30으로 고정# 게임 이미지# 1. 배경 : 640 * 480# 2. 캐릭터 : 70 * 70# 3. 똥 : 70 * 70import randomimport pygame############################################################## 기본 초기화 (반드시 해야 하는 것들)pygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 480 # 가로 크기screen_height = 640 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;똥 피하기&quot;) # 게임 이름# FPSclock = pygame.time.Clock()############################################################## 1. 사용자 게임 초기화 (배경 화면, 게임 이미지, 좌표, 속도, 폰트 등)# 배경 이미지 불러오기background = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/white.png&quot;)# 캐릭터(스프라이트) 불러오기character = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/character.png&quot;)character_size = character.get_rect().size # 이미지의 크기를 구해옴character_width = character_size[0] # 캐릭터의 가로 크기character_height = character_size[1] # 캐릭터의 세로 크기character_x_pos = (screen_width / 2) - (character_width / 2) # 화면 가로의 절반 크기에 해당하는 곳에 위치character_y_pos = screen_height - character_height # 화면 세로 크기 가장 아래에 해당하는 곳에 위치# 이동할 좌표to_x = 0# 이동 속도character_speed = 10# 똥 만들기ddong = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/ddong.png&quot;)ddong_size = ddong.get_rect().size # 이미지의 크기를 구해옴ddong_width = ddong_size[0] # 캐릭터의 가로 크기ddong_height = ddong_size[1] # 캐릭터의 세로 크기ddong_x_pos = random.randint(0, screen_width - ddong_width)ddong_y_pos = 0ddong_speed = 10running = True # 게임이 진행중인가?while running: dt = clock.tick(30) # 게임화면의 초당 프레임 수를 설정 # print(&quot;fps : &quot;+ str(clock.get_fps())) # 2. 이벤트 처리 (키보드, 마우스 등) for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님 if event.type == pygame.KEYDOWN: # 키가 눌러졌는지 확인 if event.key == pygame.K_LEFT: # 캐릭터를 왼쪽으로 to_x -= character_speed elif event.key == pygame.K_RIGHT: # 캐릭터를 오른쪽으로 to_x += character_speed if event.type == pygame.KEYUP: if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT: to_x = 0 # 3. 게임 캐릭터 위치 정의 character_x_pos += to_x if character_x_pos &amp;lt; 0: character_x_pos = 0 elif character_x_pos &amp;gt; screen_width - character_width: character_x_pos = screen_width - character_width ddong_y_pos += ddong_speed if ddong_y_pos &amp;gt; screen_height: ddong_y_pos = 0 ddong_x_pos = random.randint(0, screen_width - ddong_width) # 4. 충돌 처리 character_rect = character.get_rect() character_rect.left = character_x_pos character_rect.top = character_y_pos ddong_rect = ddong.get_rect() ddong_rect.left = ddong_x_pos ddong_rect.top = ddong_y_pos if character_rect.colliderect(ddong_rect): print(&quot;충돌했어요&quot;) running = False # 5. 화면에 그리기 screen.blit(background, (0, 0)) # 배경 그리기 screen.blit(character, (character_x_pos, character_y_pos)) # 캐릭터 그리기 screen.blit(ddong, (ddong_x_pos, ddong_y_pos)) pygame.display.update() # 게임화면을 다시 그리기! pygame# pygame 종료pygame.quit()" }, { "title": "8. frame", "url": "/posts/8_frame/", "categories": "Visual_Studio, pygame_basic", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "frameimport pygame# 기본 초기화 (반드시 해야 하는 것들)pygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 480 # 가로 크기screen_height = 640 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;Game&quot;) # 게임 이름# FPSclock = pygame.time.Clock()############################################################## 1. 사용자 게임 초기화 (배경 화면, 게임 이미지, 좌표, 속도, 폰트 등)running = True # 게임이 진행중인가?while running: dt = clock.tick(30) # 게임화면의 초당 프레임 수를 설정 # print(&quot;fps : &quot;+ str(clock.get_fps())) # 2. 이벤트 처리 (키보드, 마우스 등) for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님 # 3. 게임 캐릭터 위치 정의 # 4. 충돌 처리 # 5. 화면에 그리기 pygame.display.update() # 게임화면을 다시 그리기! pygame# pygame 종료pygame.quit()" }, { "title": "7. text", "url": "/posts/7_text/", "categories": "Visual_Studio, pygame_basic", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "textimport pygamepygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 480 # 가로 크기screen_height = 640 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;Game&quot;) # 게임 이름# FPSclock = pygame.time.Clock()# 배경 이미지 불러오기background = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/background.png&quot;)# 캐릭터(스프라이트) 불러오기character = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/character.png&quot;)character_size = character.get_rect().size # 이미지의 크기를 구해옴character_width = character_size[0] # 캐릭터의 가로 크기character_height = character_size[1] # 캐릭터의 세로 크기character_x_pos = (screen_width / 2) - (character_width / 2) # 화면 가로의 절반 크기에 해당하는 곳에 위치character_y_pos = screen_height - character_height # 화면 세로 크기 가장 아래에 해당하는 곳에 위치# 이동할 좌표to_x = 0to_y = 0# 이동 속도character_speed = 0.6# 적 캐릭터enemy = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/enemy.png&quot;)enemy_size = enemy.get_rect().size # 이미지의 크기를 구해옴enemy_width = enemy_size[0] # 캐릭터의 가로 크기enemy_height = enemy_size[1] # 캐릭터의 세로 크기enemy_x_pos = (screen_width / 2) - (enemy_width / 2) # 화면 가로의 절반 크기에 해당하는 곳에 위치enemy_y_pos = (screen_height / 2) - (enemy_height / 2) # 화면 세로 크기 가장 아래에 해당하는 곳에 위치# 폰트 정의game_font = pygame.font.Font(None, 40) # 폰트 객체 생성 (폰트, 크기)# 총 시간total_time = 10# 시작 시간start_ticks = pygame.time.get_ticks() # 현재 tick을 받아옴# 이동 속도character_speed = 0.6# 이벤트 루프running = True # 게임이 진행중인가?while running: dt = clock.tick(60) # 게임화면의 초당 프레임 수를 설정 # print(&quot;fps : &quot;+ str(clock.get_fps())) for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님 if event.type == pygame.KEYDOWN: # 키가 눌러졌는지 확인 if event.key == pygame.K_LEFT: # 캐릭터를 왼쪽으로 to_x -= character_speed elif event.key == pygame.K_RIGHT: # 캐릭터를 오른쪽으로 to_x += character_speed elif event.key == pygame.K_UP: # 캐릭터를 위로 to_y -= character_speed elif event.key == pygame.K_DOWN: # 캐릭터를 아래로 to_y += character_speed if event.type == pygame.KEYUP: # 방향키를 떼면 멈춤 if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT: to_x = 0 elif event.key == pygame.K_UP or event.key == pygame.K_DOWN: to_y = 0 character_x_pos += to_x * dt character_y_pos += to_y * dt # 가로 경계값 처리 if character_x_pos &amp;lt; 0: character_x_pos = 0 elif character_x_pos &amp;gt; screen_width - character_width: character_x_pos = screen_width - character_width # 세로 경계값 처리 if character_y_pos &amp;lt; 0: character_y_pos = 0 elif character_y_pos &amp;gt; screen_height - character_height: character_y_pos = screen_height - character_height # 충돌처리를 위한 rect 정보 업데이트 character_rect = character.get_rect() character_rect.left = character_x_pos character_rect.top = character_y_pos enemy_rect = enemy.get_rect() enemy_rect.left = enemy_x_pos enemy_rect.top = enemy_y_pos # 충돌 체크 if character_rect.colliderect(enemy_rect): print(&quot;충돌했어요&quot;) running = False screen.blit(background, (0, 0)) # 배경 그리기 screen.blit(character, (character_x_pos, character_y_pos)) # 캐릭터 그리기 screen.blit(enemy, (enemy_x_pos, enemy_y_pos)) # 적 그리기 # 타이머 집어 넣기 # 경과 시간 계산 elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000 # 경과 시간(ms)을 1000으로 나누어서 초 단위로 표시 timer = game_font.render(str(int(total_time - elapsed_time)), True, (255, 255, 255)) # 출력할 글자, true, 글자 색상 screen.blit(timer, (10, 10)) # 만약 시간이 0 이하이면 게임 종료 if total_time - elapsed_time &amp;lt;= 0: print(&quot;타임아웃&quot;) running = False pygame.display.update() # 게임화면을 다시 그리기! pygame# 잠시대기pygame.time.delay(2000) # 2초 정도 대기# pygame 종료pygame.quit()" }, { "title": "6. collision", "url": "/posts/6_collision/", "categories": "Visual_Studio, pygame_basic", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "collisionimport pygamepygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 480 # 가로 크기screen_height = 640 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;Game&quot;) # 게임 이름# FPSclock = pygame.time.Clock()# 배경 이미지 불러오기background = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/background.png&quot;)# 캐릭터(스프라이트) 불러오기character = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/character.png&quot;)character_size = character.get_rect().size # 이미지의 크기를 구해옴character_width = character_size[0] # 캐릭터의 가로 크기character_height = character_size[1] # 캐릭터의 세로 크기character_x_pos = (screen_width / 2) - (character_width / 2) # 화면 가로의 절반 크기에 해당하는 곳에 위치character_y_pos = screen_height - character_height # 화면 세로 크기 가장 아래에 해당하는 곳에 위치# 이동할 좌표to_x = 0to_y = 0# 이동 속도character_speed = 0.6# 적 캐릭터enemy = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/enemy.png&quot;)enemy_size = enemy.get_rect().size # 이미지의 크기를 구해옴enemy_width = enemy_size[0] # 캐릭터의 가로 크기enemy_height = enemy_size[1] # 캐릭터의 세로 크기enemy_x_pos = (screen_width / 2) - (enemy_width / 2) # 화면 가로의 절반 크기에 해당하는 곳에 위치enemy_y_pos = (screen_height / 2) - (enemy_height / 2) # 화면 세로 크기 가장 아래에 해당하는 곳에 위치# 이벤트 루프running = True # 게임이 진행중인가?while running: dt = clock.tick(60) # 게임화면의 초당 프레임 수를 설정 # print(&quot;fps : &quot;+ str(clock.get_fps())) for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님 if event.type == pygame.KEYDOWN: # 키가 눌러졌는지 확인 if event.key == pygame.K_LEFT: # 캐릭터를 왼쪽으로 to_x -= character_speed elif event.key == pygame.K_RIGHT: # 캐릭터를 오른쪽으로 to_x += character_speed elif event.key == pygame.K_UP: # 캐릭터를 위로 to_y -= character_speed elif event.key == pygame.K_DOWN: # 캐릭터를 아래로 to_y += character_speed if event.type == pygame.KEYUP: # 방향키를 떼면 멈춤 if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT: to_x = 0 elif event.key == pygame.K_UP or event.key == pygame.K_DOWN: to_y = 0 character_x_pos += to_x * dt character_y_pos += to_y * dt # 가로 경계값 처리 if character_x_pos &amp;lt; 0: character_x_pos = 0 elif character_x_pos &amp;gt; screen_width - character_width: character_x_pos = screen_width - character_width # 세로 경계값 처리 if character_y_pos &amp;lt; 0: character_y_pos = 0 elif character_y_pos &amp;gt; screen_height - character_height: character_y_pos = screen_height - character_height # 충돌처리를 위한 rect 정보 업데이트 character_rect = character.get_rect() character_rect.left = character_x_pos character_rect.top = character_y_pos enemy_rect = enemy.get_rect() enemy_rect.left = enemy_x_pos enemy_rect.top = enemy_y_pos # 충돌 체크 if character_rect.colliderect(enemy_rect): print(&quot;충돌했어요&quot;) running = False screen.blit(background, (0, 0)) # 배경 그리기 screen.blit(character, (character_x_pos, character_y_pos)) # 캐릭터 그리기 screen.blit(enemy, (enemy_x_pos, enemy_y_pos)) # 적 그리기 pygame.display.update() # 게임화면을 다시 그리기! pygame# pygame 종료pygame.quit()" }, { "title": "5. frame_per_second", "url": "/posts/5_frame_per_second/", "categories": "Visual_Studio, pygame_basic", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "frame_per_secondimport pygamepygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 480 # 가로 크기screen_height = 640 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;Game&quot;) # 게임 이름# FPSclock = pygame.time.Clock()# 배경 이미지 불러오기background = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/background.png&quot;)# 캐릭터(스프라이트) 불러오기character = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/character.png&quot;)character_size = character.get_rect().size # 이미지의 크기를 구해옴character_width = character_size[0] # 캐릭터의 가로 크기character_height = character_size[1] # 캐릭터의 세로 크기character_x_pos = (screen_width / 2) - (character_width / 2) # 화면 가로의 절반 크기에 해당하는 곳에 위치character_y_pos = screen_height - character_height # 화면 세로 크기 가장 아래에 해당하는 곳에 위치# 이동할 좌표to_x = 0to_y = 0# 이동 속도character_speed = 0.6# 이벤트 루프running = True # 게임이 진행중인가?while running: dt = clock.tick(60) # 게임화면의 초당 프레임 수를 설정 # print(&quot;fps : &quot;+ str(clock.get_fps())) for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님 if event.type == pygame.KEYDOWN: # 키가 눌러졌는지 확인 if event.key == pygame.K_LEFT: # 캐릭터를 왼쪽으로 to_x -= character_speed elif event.key == pygame.K_RIGHT: # 캐릭터를 오른쪽으로 to_x += character_speed elif event.key == pygame.K_UP: # 캐릭터를 위로 to_y -= character_speed elif event.key == pygame.K_DOWN: # 캐릭터를 아래로 to_y += character_speed if event.type == pygame.KEYUP: # 방향키를 떼면 멈춤 if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT: to_x = 0 elif event.key == pygame.K_UP or event.key == pygame.K_DOWN: to_y = 0 character_x_pos += to_x * dt character_y_pos += to_y * dt # 가로 경계값 처리 if character_x_pos &amp;lt; 0: character_x_pos = 0 elif character_x_pos &amp;gt; screen_width - character_width: character_x_pos = screen_width - character_width # 세로 경계값 처리 if character_y_pos &amp;lt; 0: character_y_pos = 0 elif character_y_pos &amp;gt; screen_height - character_height: character_y_pos = screen_height - character_height screen.blit(background, (0, 0)) # 배경 그리기 screen.blit(character, (character_x_pos, character_y_pos)) # 캐릭터 그리기 pygame.display.update() # 게임화면을 다시 그리기! pygame# pygame 종료pygame.quit()" }, { "title": "4. keyboard_event", "url": "/posts/4_keyboard_event/", "categories": "Visual_Studio, pygame_basic", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "keyboard_eventimport pygamepygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 480 # 가로 크기screen_height = 640 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;Game&quot;) # 게임 이름# 배경 이미지 불러오기background = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/background.png&quot;)# 캐릭터(스프라이트) 불러오기character = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/character.png&quot;)character_size = character.get_rect().size # 이미지의 크기를 구해옴character_width = character_size[0] # 캐릭터의 가로 크기character_height = character_size[1] # 캐릭터의 세로 크기character_x_pos = (screen_width / 2) - (character_width / 2) # 화면 가로의 절반 크기에 해당하는 곳에 위치character_y_pos = screen_height - character_height # 화면 세로 크기 가장 아래에 해당하는 곳에 위치# 이동할 좌표to_x = 0to_y = 0# 이벤트 루프running = True # 게임이 진행중인가?while running: for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님 if event.type == pygame.KEYDOWN: # 키가 눌러졌는지 확인 if event.key == pygame.K_LEFT: # 캐릭터를 왼쪽으로 to_x -= 5 elif event.key == pygame.K_RIGHT: # 캐릭터를 오른쪽으로 to_x += 5 elif event.key == pygame.K_UP: # 캐릭터를 위로 to_y -= 5 elif event.key == pygame.K_DOWN: # 캐릭터를 아래로 to_y += 5 if event.type == pygame.KEYUP: # 방향키를 떼면 멈춤 if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT: to_x = 0 elif event.key == pygame.K_UP or event.key == pygame.K_DOWN: to_y = 0 character_x_pos += to_x character_y_pos += to_y # 가로 경계값 처리 if character_x_pos &amp;lt; 0: character_x_pos = 0 elif character_x_pos &amp;gt; screen_width - character_width: character_x_pos = screen_width - character_width # 세로 경계값 처리 if character_y_pos &amp;lt; 0: character_y_pos = 0 elif character_y_pos &amp;gt; screen_height - character_height: character_y_pos = screen_height - character_height screen.blit(background, (0, 0)) # 배경 그리기 screen.blit(character, (character_x_pos, character_y_pos)) # 캐릭터 그리기 pygame.display.update() # 게임화면을 다시 그리기! pygame# pygame 종료pygame.quit()" }, { "title": "3. main_sprite", "url": "/posts/3_main_sprite/", "categories": "Visual_Studio, pygame_basic", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "main_spriteimport pygamepygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 480 # 가로 크기screen_height = 640 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;Game&quot;) # 게임 이름# 배경 이미지 불러오기background = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/background.png&quot;)# 캐릭터(스프라이트) 불러오기character = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/character.png&quot;)character_size = character.get_rect().size # 이미지의 크기를 구해옴character_width = character_size[0] # 캐릭터의 가로 크기character_height = character_size[1] # 캐릭터의 세로 크기character_x_pos = (screen_width / 2) - (character_width / 2) # 화면 가로의 절반 크기에 해당하는 곳에 위치character_y_pos = screen_height - character_height # 화면 세로 크기 가장 아래에 해당하는 곳에 위치# 이벤트 루프running = True # 게임이 진행중인가?while running: for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님 screen.blit(background, (0, 0)) # 배경 그리기 screen.blit(character, (character_x_pos, character_y_pos)) # 캐릭터 그리기 pygame.display.update() # 게임화면을 다시 그리기! pygame# pygame 종료pygame.quit()" }, { "title": "2. background", "url": "/posts/2_background/", "categories": "Visual_Studio, pygame_basic", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "background# 배경 이미지 넣는 방법import pygamepygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 480 # 가로 크기screen_height = 640 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;Game&quot;) # 게임 이름# 배경 이미지 불러오기background = pygame.image.load(&quot;C:/apps/python_hard1/pygame_basic/background.png&quot;)# 이벤트 루프running = True # 게임이 진행중인가?while running: for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님 screen.blit(background, (0, 0)) # 배경 그리기 pygame.display.update() # 게임화면을 다시 그리기!# pygame 종료pygame.quit()" }, { "title": "1. create_frame", "url": "/posts/1_create_frame/", "categories": "Visual_Studio, pygame_basic", "tags": "pygame, python, Visual_Studio", "date": "2021-12-26 03:30:00 +0900", "snippet": "create_frameimport pygamepygame.init() # 초기화 (반드시 필요)# 화면 크기 설정screen_width = 480 # 가로 크기screen_height = 640 # 세로 크기screen = pygame.display.set_mode((screen_width, screen_height))# 화면 타이틀 설정pygame.display.set_caption(&quot;Game&quot;) # 게임 이름# 이벤트 루프running = True # 게임이 진행중인가?while running: for event in pygame.event.get(): # 어떤 이벤트가 발생하였는가? if event.type == pygame.QUIT: # 창이 닫히는 이벤트가 발생하였는가? running = False # 게임이 진행중이 아님# pygame 종료pygame.quit()" }, { "title": "resize", "url": "/posts/resize/", "categories": "Visual_Studio, image_edit", "tags": "resize, python, Visual_Studio", "date": "2021-12-21 03:30:00 +0900", "snippet": "resizefrom PIL import Imageimport os.pathtargerdir = &#39;C:/Users/okok0/OneDrive/바탕 화면/samyang&#39; #해당 폴더 설정 files = os.listdir(targerdir)format = [&quot;.jpg&quot;,&quot;.png&quot;,&quot;.jpeg&quot;,&quot;bmp&quot;,&quot;.JPG&quot;,&quot;.PNG&quot;,&quot;JPEG&quot;,&quot;BMP&quot;] #지원하는 파일 형태의 확장자들for (path,dirs,files) in os.walk(targerdir): for file in files: if file.endswith(tuple(format)): image = Image.open(path+&quot;\\\\&quot;+file) print(image.filename) print(image.size) image=image.resize((512, 512), Image.ANTIALIAS) image = image.convert(&quot;RGB&quot;) image.save(&#39;C:/Users/okok0/OneDrive/바탕 화면/samyang_resize&#39;+&quot;\\\\&quot;+file, quality=100) print(image.size) else: print(path) print(&quot;InValid&quot;,file)" }, { "title": "rename", "url": "/posts/rename/", "categories": "Visual_Studio, image_edit", "tags": "rename, python, Visual_Studio", "date": "2021-12-21 03:30:00 +0900", "snippet": "renameimport os# 주어진 디렉토리에 있는 항목들의 이름을 담고 있는 리스트를 반환합니다.# 리스트는 임의의 순서대로 나열됩니다.file_path = &#39;C:/Users/okok0/OneDrive/바탕 화면/afrimo/&#39;file_names = os.listdir(file_path)file_namesi = 1for name in file_names: src = os.path.join(file_path, name) dst = str(i) + &#39;.jpg&#39; dst = os.path.join(file_path, dst) os.rename(src, dst) i += 1" }, { "title": "crop", "url": "/posts/crop/", "categories": "Visual_Studio, image_edit", "tags": "crop, python, Visual_Studio", "date": "2021-12-21 03:30:00 +0900", "snippet": "cropimport cv2 as cvimport cv2import numpy as npimport osimport refrom os import removeimport shutilimport mathdef createFolder(directory): try: if not os.path.exists(directory): os.makedirs(directory) except OSError: print (&#39;Error: Creating directory. &#39; + directory)keyword = input(&#39;검색할 태그를 입력하세요 : &#39;)path = &#39;C:/Users/okok0/OneDrive/바탕 화면/향수/&#39; + keyword # 자신의 파일경로file_list = os.listdir(path)file_list_py = [file for file in file_list if file.endswith(&#39;.jpg&#39;)]folder_name = path + &#39;etc&#39;createFolder(folder_name)for file_name in file_list_py: img_array = np.fromfile(path + &#39;/&#39; + file_name, np.uint8) # 자신의 파일경로 img = cv2.imdecode(img_array, cv2.IMREAD_UNCHANGED) isDragging = False # 마우스 드래그 상태 저장 x0, y0, w, h = -1,-1,-1,-1 # 영역 선택 좌표 저장 blue, red = (255,0,0),(0,0,255) # 색상 값 def onMouse(event,x,y,flags,param): # 마우스 이벤트 핸들 함수 ---① global isDragging, x0, y0, img # 전역변수 참조 if event == cv2.EVENT_LBUTTONDOWN: # 왼쪽 마우스 버튼 다운, 드래그 시작 ---② isDragging = True x0 = x y0 = y elif event == cv2.EVENT_MOUSEMOVE: # 마우스 움직임 ---③ if isDragging: # 드래그 진행 중 img_draw = img.copy() # 사각형 그림 표현을 위한 이미지 복제 cv2.rectangle(img_draw, (x0, y0), (x, y), blue, 2) # 드래그 진행 영역 표시 cv2.imshow(&#39;img&#39;, img_draw) # 사각형 표시된 그림 화면 출력 elif event == cv2.EVENT_LBUTTONUP: # 왼쪽 마우스 버튼 업 ---④ if isDragging: # 드래그 중지 isDragging = False w = x - x0 # 드래그 영역 폭 계산 h = y - y0 # 드래그 영역 높이 계산 print(&quot;x:%d, y:%d, w:%d, h:%d&quot; % (x0, y0, w, h)) if w &amp;gt; 0 and h &amp;gt; 0: # 폭과 높이가 양수이면 드래그 방향이 옳음 ---⑤ img_draw = img.copy() # 선택 영역에 사각형 그림을 표시할 이미지 복제 # 선택 영역에 빨간 사각형 표시 cv2.rectangle(img_draw, (x0, y0), (x, y), red, 2) cv2.imshow(&#39;img&#39;, img_draw) # 빨간 사각형 그려진 이미지 화면 출력 roi = img[y0:y0+h, x0:x0+w] # 원본 이미지에서 선택 영영만 ROI로 지정 ---⑥ cv2.imshow(&#39;cropped&#39;, roi) # ROI 지정 영역을 새창으로 표시 cv2.moveWindow(&#39;cropped&#39;, 0, 0) # 새창을 화면 좌측 상단에 이동 cv2.imwrite(&#39;C:/apps/crawling/selenium/Cropped/{}&#39;.format(file_name), roi) # ROI 영역만 파일로 저장 ---⑦ rect = cv2.selectROI(&#39;Select Window&#39;, roi, fromCenter=False, showCrosshair=True) a, b, c, d = rect a2= a+c b2 = b+d print(&quot;croped.&quot;) cv2.destroyWindow(&#39;Select Window&#39;) if 0 == a+a2+b+b2: # 이미지 버리는 곳 shutil.move(path+&#39;/&#39;+ file_name, &#39;C:/Users/okok0/OneDrive/바탕 화면/etc/&#39; + file_name) else : # 원본 이미지 다른곳으로 저장 shutil.move(path + &#39;/&#39; + file_name, folder_name + &#39;/&#39; + file_name) else: cv2.imshow(&#39;img&#39;, img) # 드래그 방향이 잘못된 경우 사각형 그림ㅇㅣ 없는 원본 이미지 출력 print(&quot;좌측 상단에서 우측 하단으로 영역을 드래그 하세요.&quot;) cv2.imshow(&#39;img&#39;, img) cv2.setMouseCallback(&#39;img&#39;, onMouse) # 마우스 이벤트 등록 ---⑧ cv2.waitKey() cv2.destroyAllWindows() " }, { "title": "boundingbox", "url": "/posts/boundingbox/", "categories": "Visual_Studio, image_edit", "tags": "boundingbox, python, Visual_Studio", "date": "2021-12-21 03:30:00 +0900", "snippet": "boundingboximport cv2import numpy as npimport osimport refrom os import removeimport shutildef createFolder(directory): try: if not os.path.exists(directory): os.makedirs(directory) except OSError: print (&#39;Error: Creating directory. &#39; + directory) #불러올 폴더 이름에 띄어쓰기가 있으면 에러가 발생함keyword = input(&#39;검색할 태그를 입력하세요 : &#39;)path = &#39;C:/Users/okok0/OneDrive/바탕 화면/&#39; + keyword # 자신의 파일경로file_list = os.listdir(path)file_list_py = [file for file in file_list if file.endswith(&#39;.jpg&#39;)]folder_name = path + &#39;txt&#39;createFolder(folder_name)#리사이즈 폴더 만들기# folder_resize = path+&#39;_resize&#39;# createFolder(folder_resize)for file_name in file_list_py: img_array = np.fromfile(path + &#39;/&#39; + file_name, np.uint8) # 자신의 파일경로 rgb_image = cv2.imdecode(img_array, cv2.IMREAD_UNCHANGED) #일반사이즈 rect = cv2.selectROI(&#39;Select Window&#39;, rgb_image, fromCenter=False, showCrosshair=True) #리사이즈 코드 # img_resize = cv2.resize(rgb_image, None, fx=2, fy=2, interpolation = cv2.INTER_CUBIC) # rect = cv2.selectROI(&#39;Select Window&#39;, img_resize, fromCenter=False, showCrosshair=True) cv2.destroyWindow(&#39;Select Window&#39;) x, y, w, h = rect x2= x+w y2 = y+h rgb_ = str(x)+&#39; &#39;+str(y)+&#39; &#39;+str(x2)+&#39; &#39;+str(y)+&#39; &#39;+str(x2)+&#39; &#39;+str(y2)+&#39; &#39;+str(x)+&#39; &#39;+str(y2) # rgb_ = str(x)+&#39; &#39;+str(y)+&#39; &#39;+str(x2)+&#39; &#39;+str(y2) if 0 == x+x2+y+y2: shutil.move(path+&#39;/&#39;+ file_name, &#39;C:/Users/okok0/OneDrive/바탕 화면/etc/&#39; + file_name) #파일이동 # f = path+&#39;/&#39;+file_name # remove(f) # 파일 지워짐 # pass else : shutil.move(path + &#39;/&#39; + file_name, folder_name + &#39;/&#39; + file_name) # cv2.imwrite(folder_resize+&#39;/&#39;+file_name,img_resize) #리사이즈 좌표 file_name = file_name.replace(&#39;.jpg&#39;, &#39;&#39;) # f = open(folder_name+&#39;/&#39;+file_name+&#39;.txt&#39;,&#39;w&#39;) #리사이즈 좌표 f = open(folder_name + &#39;/&#39; + file_name + &#39;.txt&#39;,&#39;w&#39;) f.write(rgb_+&quot; &quot;+keyword) f.close()" }, { "title": "naver_crawling", "url": "/posts/naver_crawling/", "categories": "Visual_Studio, crawling", "tags": "crawling, python, Visual_Studio", "date": "2021-12-21 03:30:00 +0900", "snippet": "naver_crawlingimport urllib.requestfrom urllib.parse import quote_plusfrom bs4 import BeautifulSoupfrom selenium import webdriverimport timedef scroll_down(): global driver last_height = driver.execute_script(&quot;return document.body.scrollHeight&quot;) while True: driver.execute_script(&quot;window.scrollTo(0, document.body.scrollHeight);&quot;) time.sleep(2) new_height = driver.execute_script(&quot;return document.body.scrollHeight&quot;) if new_height == last_height: time.sleep(2) new_height = driver.execute_script(&quot;return document.body.scrollHeight&quot;) try: driver.find_element_by_class_name(&quot;mye4qd&quot;).click() except: if new_height == last_height: break last_height = new_heightkeyword = input(&#39;검색할 태그를 입력하세요 : &#39;)url = &#39;https://search.naver.com/search.naver?where=image&amp;amp;sm=tab_jum&amp;amp;query={}&#39;.format(keyword)driver = webdriver.Chrome()driver.get(url)time.sleep(1)body = driver.find_element_by_css_selector(&#39;body&#39;)scroll_down() req = driver.page_sourcesoup = BeautifulSoup(req, &#39;html.parser&#39;)images = soup.find_all(&#39;img&#39;, attrs={&#39;class&#39;:&#39;_image _listImage&#39;})print(&#39;number of img tags: &#39;, len(images))n = 1for i in images: try: imgUrl = i[&quot;data-lazy-src&quot;] except: imgUrl = i[&quot;src&quot;] with urllib.request.urlopen(imgUrl) as f: with open(&#39;C:/apps/crawling/selenium/&#39; + str(n) + &#39;.jpg&#39;, &#39;wb&#39;) as h: img = f.read() h.write(img) n += 1driver.quit()" }, { "title": "google_crawling", "url": "/posts/google_crawling/", "categories": "Visual_Studio, crawling", "tags": "crawling, python, Visual_Studio", "date": "2021-12-21 03:30:00 +0900", "snippet": "google_crawlingfrom selenium import webdriverfrom selenium.webdriver.common.keys import Keysimport timeimport urllib.requestdriver = webdriver.Chrome()driver.get(&quot;https://www.google.co.kr/imghp?hl=ko&amp;amp;tab=wi&amp;amp;authuser=0&amp;amp;ogbl&quot;)elem = driver.find_element_by_name(&quot;q&quot;)elem.send_keys(&quot;검색하고싶은거&quot;)elem.send_keys(Keys.RETURN)SCROLL_PAUSE_TIME = 3# Get scroll heightlast_height = driver.execute_script(&quot;return document.body.scrollHeight&quot;)while True: # Scroll down to bottom driver.execute_script(&quot;window.scrollTo(0, document.body.scrollHeight);&quot;) # Wait to load page time.sleep(SCROLL_PAUSE_TIME) # Calculate new scroll height and compare with last scroll height new_height = driver.execute_script(&quot;return document.body.scrollHeight&quot;) if new_height == last_height: try: driver.find_element_by_css_selector(&quot;.mye4qd&quot;).click() except: break last_height = new_heightimages = driver.find_elements_by_css_selector(&quot;.rg_i.Q4LuWd&quot;)count = 1for image in images: try: image.click() time.sleep(3) imgUrl = driver.find_element_by_xpath(&#39;/html/body/div[2]/c-wiz/div[3]/div[2]/div[3]/div/div/div[3]/div[2]/c-wiz/div/div[1]/div[1]/div[2]/div/a/img&#39;).get_attribute(&quot;src&quot;) opener=urllib.request.build_opener() opener.addheaders=[(&#39;User-Agent&#39;,&#39;자신 컴퓨터&#39;)] urllib.request.install_opener(opener) urllib.request.urlretrieve(imgUrl, str(count) + &quot;.jpg&quot;) count = count + 1 except: passdriver.close()" }, { "title": "15. pandas 퀴즈", "url": "/posts/15_%ED%80%B4%EC%A6%88/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:44:00 +0900", "snippet": "Pandas 퀴즈다음은 대한민국 영화 중에서 관객 수가 가장 많은 상위 8개의 데이터입니다.주어진 코드를 이용하여 퀴즈를 풀어보시오.주의사항 코드는 영상 본문 또는 고정 댓글로 제공됩니다. 해결이 어려운 경우 구글링 또는 앞에서 공부한 내용을 참고하셔도 좋습니다.import pandas as pddata = { &#39;영화&#39; : [&#39;명량&#39;, &#39;극한직업&#39;, &#39;신과함께-죄와 벌&#39;, &#39;국제시장&#39;, &#39;괴물&#39;, &#39;도둑들&#39;, &#39;7번방의 선물&#39;, &#39;암살&#39;], &#39;개봉 연도&#39; : [2014, 2019, 2017, 2014, 2006, 2012, 2013, 2015], &#39;관객 수&#39; : [1761, 1626, 1441, 1426, 1301, 1298, 1281, 1270], # (단위 : 만 명) &#39;평점&#39; : [8.88, 9.20, 8.73, 9.16, 8.62, 7.64, 8.83, 9.10]}df = pd.DataFrame(data)df 영화 개봉 연도 관객 수 평점 0 명량 2014 1761 8.88 1 극한직업 2019 1626 9.20 2 신과함께-죄와 벌 2017 1441 8.73 3 국제시장 2014 1426 9.16 4 괴물 2006 1301 8.62 5 도둑들 2012 1298 7.64 6 7번방의 선물 2013 1281 8.83 7 암살 2015 1270 9.10 1) 전체 데이터 중에서 ‘영화’ 정보만 출력하시오df[&#39;영화&#39;]0 명량1 극한직업2 신과함께-죄와 벌3 국제시장4 괴물5 도둑들6 7번방의 선물7 암살Name: 영화, dtype: object2) 전체 데이터 중에서 ‘영화’, ‘평점’ 정보를 출력하시오df[[&#39;영화&#39;, &#39;평점&#39;]] 영화 평점 0 명량 8.88 1 극한직업 9.20 2 신과함께-죄와 벌 8.73 3 국제시장 9.16 4 괴물 8.62 5 도둑들 7.64 6 7번방의 선물 8.83 7 암살 9.10 3) 2015년 이후에 개봉한 영화 데이터 중에서 ‘영화’, ‘개봉 연도’ 정보를 출력하시오df.loc[df[&#39;개봉 연도&#39;] &amp;gt;= 2015, [&#39;영화&#39;, &#39;개봉 연도&#39;]] 영화 개봉 연도 1 극한직업 2019 2 신과함께-죄와 벌 2017 7 암살 2015 4) 주어진 계산식을 참고하여 ‘추천 점수’ Column을 추가하시오 추천 점수 = (관객수 * 평점) // 100df[&#39;추천 점수&#39;] = (df[&#39;관객 수&#39;] * df[&#39;평점&#39;]) // 100df 영화 개봉 연도 관객 수 평점 추천 점수 0 명량 2014 1761 8.88 156.0 1 극한직업 2019 1626 9.20 149.0 2 신과함께-죄와 벌 2017 1441 8.73 125.0 3 국제시장 2014 1426 9.16 130.0 4 괴물 2006 1301 8.62 112.0 5 도둑들 2012 1298 7.64 99.0 6 7번방의 선물 2013 1281 8.83 113.0 7 암살 2015 1270 9.10 115.0 5) 전체 데이터를 ‘개봉 연도’ 기준 내림차순으로 출력하시오df.sort_values([&#39;개봉 연도&#39;], ascending=False) 영화 개봉 연도 관객 수 평점 추천 점수 1 극한직업 2019 1626 9.20 149.0 2 신과함께-죄와 벌 2017 1441 8.73 125.0 7 암살 2015 1270 9.10 115.0 0 명량 2014 1761 8.88 156.0 3 국제시장 2014 1426 9.16 130.0 6 7번방의 선물 2013 1281 8.83 113.0 5 도둑들 2012 1298 7.64 99.0 4 괴물 2006 1301 8.62 112.0 " }, { "title": "14. 그룹화", "url": "/posts/14_%EA%B7%B8%EB%A3%B9%ED%99%94/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:43:00 +0900", "snippet": "14. 그룹화동일한 값을 가진 것들끼리 합쳐서 통계 또는 평균 등의 값을 계산하기 위해 사용import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df. groupby(&#39;학교&#39;)&amp;lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000023008B891F0&amp;gt;df.groupby(&#39;학교&#39;).get_group(&#39;북산고&#39;) 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN df.groupby(&#39;학교&#39;).get_group(&#39;능남고&#39;) 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.groupby(&#39;학교&#39;).mean() # 계산 가능한 데이터들의 평균값 키 국어 영어 수학 과학 사회 학교 능남고 193.333333 78.333333 83.333333 76.666667 73.333333 70.0 북산고 184.800000 53.000000 55.000000 60.000000 68.000000 55.0 df.groupby(&#39;학교&#39;).size() # 각 그룹의 크기학교능남고 3북산고 5dtype: int64df.groupby(&#39;학교&#39;).size()[&#39;능남고&#39;] # 학교로 그룹화를 한 뒤에 능남고에 행당하는 데이터의 수3df.groupby(&#39;학교&#39;)[&#39;키&#39;].mean() # 학교로 그룹화를 한 뒤에 키의 평균 데이터학교능남고 193.333333북산고 184.800000Name: 키, dtype: float64df.groupby(&#39;학교&#39;)[[&#39;국어&#39;, &#39;영어&#39;, &#39;수학&#39;]].mean() # 학교로 그룹화를 한 뒤에 국어, 영어, 수학 평균 데이터 국어 영어 수학 학교 능남고 78.333333 83.333333 76.666667 북산고 53.000000 55.000000 60.000000 df[&#39;학년&#39;] = [3, 3, 2, 1, 1, 3, 2, 2] # 학년 Column 추가df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 학년 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 3 2번 정대만 북산고 184 40 35 50 55 25 Java 3 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 2 4번 서태웅 북산고 187 40 60 70 75 80 NaN 1 5번 강백호 북산고 188 15 20 10 35 10 NaN 1 6번 변덕규 능남고 202 80 100 95 85 80 C 3 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 2 8번 윤대협 능남고 190 100 85 90 95 95 C# 2 df.groupby([&#39;학교&#39;, &#39;학년&#39;]).mean() # 학교별, 학년별 평균 데이터 키 국어 영어 수학 과학 사회 학교 학년 능남고 2 189.0 77.5 75.0 67.5 67.5 65.0 3 202.0 80.0 100.0 95.0 85.0 80.0 북산고 1 187.5 27.5 40.0 40.0 55.0 45.0 2 168.0 80.0 75.0 70.0 80.0 75.0 3 190.5 65.0 60.0 75.0 75.0 55.0 df.groupby(&#39;학년&#39;).mean() # 학년별 평균 데이터 키 국어 영어 수학 과학 사회 학년 1 187.500000 27.500000 40.000000 40.000000 55.000000 45.000000 2 182.000000 78.333333 75.000000 68.333333 71.666667 68.333333 3 194.333333 70.000000 73.333333 81.666667 78.333333 63.333333 df.groupby(&#39;학년&#39;).mean().sort_values(&#39;키&#39;) # 학년별 키가 작은 순서 키 국어 영어 수학 과학 사회 학년 2 182.000000 78.333333 75.000000 68.333333 71.666667 68.333333 1 187.500000 27.500000 40.000000 40.000000 55.000000 45.000000 3 194.333333 70.000000 73.333333 81.666667 78.333333 63.333333 df.groupby(&#39;학년&#39;).mean().sort_values(&#39;키&#39;, ascending=False) # 학년별 키가 큰 순서 키 국어 영어 수학 과학 사회 학년 3 194.333333 70.000000 73.333333 81.666667 78.333333 63.333333 1 187.500000 27.500000 40.000000 40.000000 55.000000 45.000000 2 182.000000 78.333333 75.000000 68.333333 71.666667 68.333333 df.groupby([&#39;학교&#39;, &#39;학년&#39;]).sum() # 학교별 학년별 데이터 합 키 국어 영어 수학 과학 사회 학교 학년 능남고 2 378 155 150 135 135 130 3 202 80 100 95 85 80 북산고 1 375 55 80 80 110 90 2 168 80 75 70 80 75 3 381 130 120 150 150 110 df.groupby(&#39;학교&#39;)[&#39;SW특기&#39;].count() # 학교로 그룹화를 한 뒤에 각 학교별 SW특기 데이터의 수를 가져옴 (NaN 값은 안불러옴)학교능남고 3북산고 3Name: SW특기, dtype: int64df.groupby(&#39;학교&#39;)[[&#39;이름&#39;, &#39;SW특기&#39;]].count() # 학교로 그룹화를 한 뒤에 각 학교별 이름, SW특기 데이터의 수를 가져옴 이름 SW특기 학교 능남고 3 3 북산고 5 3 school = df.groupby(&#39;학교&#39;)school[&#39;학년&#39;].value_counts() # 학교로 그룹화를 한 뒤에 학년별 학생 수를 가져옴학교 학년능남고 2 2 3 1북산고 1 2 3 2 2 1Name: 학년, dtype: int64school[&#39;학년&#39;].value_counts().loc[&#39;북산고&#39;] # 학교로 그룹화를 한 뒤에 북산고에 대해서 학년별 학생 수를 가져옴학년1 23 22 1Name: 학년, dtype: int64school[&#39;학년&#39;].value_counts().loc[&#39;능남고&#39;] # 학교로 그룹화를 한 뒤에 능남고에 대해서 학년별 학생 수를 가져옴학년2 23 1Name: 학년, dtype: int64school[&#39;학년&#39;].value_counts(normalize=True).loc[&#39;북산고&#39;] # 학생들위 수 데이터를 퍼센트로 비교하여 가져옴학년1 0.43 0.42 0.2Name: 학년, dtype: float64" }, { "title": "13. 함수 적용", "url": "/posts/13_%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:42:00 +0900", "snippet": "13. 함수 적용import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df[&#39;학교&#39;] = df[&#39;학교&#39;] + &#39;등학교&#39;df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고등학교 197 90 85 100 95 85 Python 2번 정대만 북산고등학교 184 40 35 50 55 25 Java 3번 송태섭 북산고등학교 168 80 75 70 80 75 Javascript 4번 서태웅 북산고등학교 187 40 60 70 75 80 NaN 5번 강백호 북산고등학교 188 15 20 10 35 10 NaN 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# 데이터에 함수 적용 (apply)# &#39;키&#39; 뒤 에 cm 를 붙이는 역할def add_cm(height): return str(height) + &#39;cm&#39;df[&#39;키&#39;] = df[&#39;키&#39;].apply(add_cm) # 키 데이터에 대해서 add_cm 함수를 호출한 결과 데이터를 반영df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고등학교 197cm 90 85 100 95 85 Python 2번 정대만 북산고등학교 184cm 40 35 50 55 25 Java 3번 송태섭 북산고등학교 168cm 80 75 70 80 75 Javascript 4번 서태웅 북산고등학교 187cm 40 60 70 75 80 NaN 5번 강백호 북산고등학교 188cm 15 20 10 35 10 NaN 6번 변덕규 능남고등학교 202cm 80 100 95 85 80 C 7번 황태산 능남고등학교 188cm 55 65 45 40 35 PYTHON 8번 윤대협 능남고등학교 190cm 100 85 90 95 95 C# def capitalize(lang): if pd.notnull(lang): # NaN 이 아닌지 return lang.capitalize() # 첫 글자는 대문자로, 나머지는 소문자로 return langdf[&#39;SW특기&#39;] = df[&#39;SW특기&#39;].apply(capitalize)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고등학교 197cm 90 85 100 95 85 Python 2번 정대만 북산고등학교 184cm 40 35 50 55 25 Java 3번 송태섭 북산고등학교 168cm 80 75 70 80 75 Javascript 4번 서태웅 북산고등학교 187cm 40 60 70 75 80 NaN 5번 강백호 북산고등학교 188cm 15 20 10 35 10 NaN 6번 변덕규 능남고등학교 202cm 80 100 95 85 80 C 7번 황태산 능남고등학교 188cm 55 65 45 40 35 Python 8번 윤대협 능남고등학교 190cm 100 85 90 95 95 C# " }, { "title": "12. 데이터 수정", "url": "/posts/12_%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%88%98%EC%A0%95/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:41:00 +0900", "snippet": "12. 데이터 수정import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# Column 수정df[&#39;학교&#39;].replace({&#39;북산고&#39;:&#39;상북고&#39;}) # 북산고를 상북고로 수정지원번호1번 상북고2번 상북고3번 상북고4번 상북고5번 상북고6번 능남고7번 능남고8번 능남고Name: 학교, dtype: objectdf[&#39;학교&#39;].replace({&#39;북산고&#39;:&#39;상북고&#39;, &#39;능남고&#39;:&#39;중흥고&#39;}) # 북산고는 상북고로 능남고는 중흥고로 수정지원번호1번 상북고2번 상북고3번 상북고4번 상북고5번 상북고6번 중흥고7번 중흥고8번 중흥고Name: 학교, dtype: objectdf[&#39;학교&#39;].replace({&#39;북산고&#39;:&#39;상북고&#39;}, inplace=True)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 상북고 197 90 85 100 95 85 Python 2번 정대만 상북고 184 40 35 50 55 25 Java 3번 송태섭 상북고 168 80 75 70 80 75 Javascript 4번 서태웅 상북고 187 40 60 70 75 80 NaN 5번 강백호 상북고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df[&#39;SW특기&#39;].str.lower() # 소문자로 수정지원번호1번 python2번 java3번 javascript4번 NaN5번 NaN6번 c7번 python8번 c#Name: SW특기, dtype: objectdf[&#39;SW특기&#39;] = df[&#39;SW특기&#39;].str.lower()df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 상북고 197 90 85 100 95 85 python 2번 정대만 상북고 184 40 35 50 55 25 java 3번 송태섭 상북고 168 80 75 70 80 75 javascript 4번 서태웅 상북고 187 40 60 70 75 80 NaN 5번 강백호 상북고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 c 7번 황태산 능남고 188 55 65 45 40 35 python 8번 윤대협 능남고 190 100 85 90 95 95 c# df[&#39;SW특기&#39;] = df[&#39;SW특기&#39;].str.upper() # 대문자로 수정df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 상북고 197 90 85 100 95 85 PYTHON 2번 정대만 상북고 184 40 35 50 55 25 JAVA 3번 송태섭 상북고 168 80 75 70 80 75 JAVASCRIPT 4번 서태웅 상북고 187 40 60 70 75 80 NaN 5번 강백호 상북고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df[&#39;학교&#39;] = df[&#39;학교&#39;] + &quot;등학교&quot;df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 4번 서태웅 상북고등학교 187 40 60 70 75 80 NaN 5번 강백호 상북고등학교 188 15 20 10 35 10 NaN 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# Column 추가df[&#39;총합&#39;] = df[&#39;국어&#39;] + df[&#39;영어&#39;] + df[&#39;수학&#39;] + df[&#39;과학&#39;] + df[&#39;사회&#39;]df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 4번 서태웅 상북고등학교 187 40 60 70 75 80 NaN 325 5번 강백호 상북고등학교 188 15 20 10 35 10 NaN 90 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 440 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 df[&#39;결과&#39;] = &#39;Fail&#39; # 결과 column을 추가하고 전체 데이터는 Fail 로 초기화df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 결과 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 Fail 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 Fail 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 Fail 4번 서태웅 상북고등학교 187 40 60 70 75 80 NaN 325 Fail 5번 강백호 상북고등학교 188 15 20 10 35 10 NaN 90 Fail 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 440 Fail 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 Fail 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 Fail df.loc[df[&#39;총합&#39;] &amp;gt; 400, &#39;결과&#39;] = &#39;Pass&#39; # 총합이 400보다 큰 데이터에 대해서 결과를 Pass로 업데이트df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 결과 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 Pass 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 Fail 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 Fail 4번 서태웅 상북고등학교 187 40 60 70 75 80 NaN 325 Fail 5번 강백호 상북고등학교 188 15 20 10 35 10 NaN 90 Fail 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 440 Pass 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 Fail 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 Pass Column 삭제df.drop(columns=[&#39;총합&#39;]) # 총합 Column 을 삭제 이름 학교 키 국어 영어 수학 과학 사회 SW특기 결과 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON Pass 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA Fail 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT Fail 4번 서태웅 상북고등학교 187 40 60 70 75 80 NaN Fail 5번 강백호 상북고등학교 188 15 20 10 35 10 NaN Fail 6번 변덕규 능남고등학교 202 80 100 95 85 80 C Pass 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON Fail 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# Pass df.drop(columns=[&#39;국어&#39;, &#39;영어&#39;, &#39;수학&#39;]) # 국어 , 영어, 수학 Column 을 삭제 이름 학교 키 과학 사회 SW특기 총합 결과 지원번호 1번 채치수 상북고등학교 197 95 85 PYTHON 455 Pass 2번 정대만 상북고등학교 184 55 25 JAVA 205 Fail 3번 송태섭 상북고등학교 168 80 75 JAVASCRIPT 380 Fail 4번 서태웅 상북고등학교 187 75 80 NaN 325 Fail 5번 강백호 상북고등학교 188 35 10 NaN 90 Fail 6번 변덕규 능남고등학교 202 85 80 C 440 Pass 7번 황태산 능남고등학교 188 40 35 PYTHON 240 Fail 8번 윤대협 능남고등학교 190 95 95 C# 465 Pass Row 삭제df.drop(index=&#39;4번&#39;) # 4번 학생 데이터 row를 삭제 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 결과 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 Pass 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 Fail 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 Fail 5번 강백호 상북고등학교 188 15 20 10 35 10 NaN 90 Fail 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 440 Pass 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 Fail 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 Pass filt = df[&#39;수학&#39;] &amp;lt; 80 # 수학 점수가 80점 미만 학생들 필터링df[filt] 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 결과 지원번호 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 Fail 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 Fail 4번 서태웅 상북고등학교 187 40 60 70 75 80 NaN 325 Fail 5번 강백호 상북고등학교 188 15 20 10 35 10 NaN 90 Fail 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 Fail df[filt].indexIndex([&#39;2번&#39;, &#39;3번&#39;, &#39;4번&#39;, &#39;5번&#39;, &#39;7번&#39;], dtype=&#39;object&#39;, name=&#39;지원번호&#39;)df.drop(index=df[filt].index) 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 결과 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 Pass 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 440 Pass 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 Pass Row 추가df.loc[&#39;9번&#39;] = [&#39;이도경&#39;, &#39;중흥고등학교&#39;, 177, 90, 80, 90, 96, 70, &#39;Kotlin&#39;, 426, &#39;Pass&#39;] # 새로운 row 추가df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 결과 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 Pass 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 Fail 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 Fail 4번 서태웅 상북고등학교 187 40 60 70 75 80 NaN 325 Fail 5번 강백호 상북고등학교 188 15 20 10 35 10 NaN 90 Fail 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 440 Pass 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 Fail 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 Pass 9번 이도경 중흥고등학교 177 90 80 90 96 70 Kotlin 426 Pass Cell 수정df.loc[&#39;4번&#39;, &#39;SW특기&#39;] = &#39;Python&#39; # 4번 학생의 SW특기 데이터를 Python 으로 변경df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 결과 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 Pass 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 Fail 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 Fail 4번 서태웅 상북고등학교 187 40 60 70 75 80 Python 325 Fail 5번 강백호 상북고등학교 188 15 20 10 35 10 NaN 90 Fail 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 440 Pass 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 Fail 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 Pass 9번 이도경 중흥고등학교 177 90 80 90 96 70 Kotlin 426 Pass df.loc[&#39;5번&#39;, [&#39;학교&#39;, &#39;SW특기&#39;]] = [&#39;능남고등학교&#39;, &#39;C&#39;] # 5번 학생의 학교는 능남고등학교로 SW특기는 C로 변경df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 결과 지원번호 1번 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 Pass 2번 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 Fail 3번 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 Fail 4번 서태웅 상북고등학교 187 40 60 70 75 80 Python 325 Fail 5번 강백호 능남고등학교 188 15 20 10 35 10 C 90 Fail 6번 변덕규 능남고등학교 202 80 100 95 85 80 C 440 Pass 7번 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 Fail 8번 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 Pass 9번 이도경 중흥고등학교 177 90 80 90 96 70 Kotlin 426 Pass Column 순서 변경cols = list(df.columns)cols[&#39;이름&#39;, &#39;학교&#39;, &#39;키&#39;, &#39;국어&#39;, &#39;영어&#39;, &#39;수학&#39;, &#39;과학&#39;, &#39;사회&#39;, &#39;SW특기&#39;, &#39;총합&#39;, &#39;결과&#39;]df = df[[cols[-1]] + cols[0:-1]] # 맨 뒤에 있는 결과 column을 앞으로 가져오고, 나머지 column 들과 합쳐서 순서 변경df 결과 이름 학교 키 국어 영어 수학 과학 사회 SW특기 총합 지원번호 1번 Pass 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 2번 Fail 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 3번 Fail 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 4번 Fail 서태웅 상북고등학교 187 40 60 70 75 80 Python 325 5번 Fail 강백호 능남고등학교 188 15 20 10 35 10 C 90 6번 Pass 변덕규 능남고등학교 202 80 100 95 85 80 C 440 7번 Fail 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 8번 Pass 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 9번 Pass 이도경 중흥고등학교 177 90 80 90 96 70 Kotlin 426 Column 이름 변경df.columnsIndex([&#39;결과&#39;, &#39;이름&#39;, &#39;학교&#39;, &#39;키&#39;, &#39;국어&#39;, &#39;영어&#39;, &#39;수학&#39;, &#39;과학&#39;, &#39;사회&#39;, &#39;SW특기&#39;, &#39;총합&#39;], dtype=&#39;object&#39;)df.columns = [&#39;Result&#39;, &#39;Name&#39;, &#39;School&#39;, &#39;키&#39;, &#39;국어&#39;, &#39;영어&#39;, &#39;수학&#39;, &#39;과학&#39;, &#39;사회&#39;, &#39;SW특기&#39;, &#39;총합&#39;]df Result Name School 키 국어 영어 수학 과학 사회 SW특기 총합 지원번호 1번 Pass 채치수 상북고등학교 197 90 85 100 95 85 PYTHON 455 2번 Fail 정대만 상북고등학교 184 40 35 50 55 25 JAVA 205 3번 Fail 송태섭 상북고등학교 168 80 75 70 80 75 JAVASCRIPT 380 4번 Fail 서태웅 상북고등학교 187 40 60 70 75 80 Python 325 5번 Fail 강백호 능남고등학교 188 15 20 10 35 10 C 90 6번 Pass 변덕규 능남고등학교 202 80 100 95 85 80 C 440 7번 Fail 황태산 능남고등학교 188 55 65 45 40 35 PYTHON 240 8번 Pass 윤대협 능남고등학교 190 100 85 90 95 95 C# 465 9번 Pass 이도경 중흥고등학교 177 90 80 90 96 70 Kotlin 426 " }, { "title": "11. 데이터 정렬", "url": "/posts/11_%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%95%EB%A0%AC/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:40:00 +0900", "snippet": "11. 데이터 정렬import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.sort_values(&#39;키&#39;) # 키 기준으로 오름차순 정렬 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 2번 정대만 북산고 184 40 35 50 55 25 Java 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# 1번 채치수 북산고 197 90 85 100 95 85 Python 6번 변덕규 능남고 202 80 100 95 85 80 C df.sort_values(&#39;키&#39;, ascending=False) # 키 기준으로 내림차순 정렬 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 6번 변덕규 능남고 202 80 100 95 85 80 C 1번 채치수 북산고 197 90 85 100 95 85 Python 8번 윤대협 능남고 190 100 85 90 95 95 C# 5번 강백호 북산고 188 15 20 10 35 10 NaN 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 4번 서태웅 북산고 187 40 60 70 75 80 NaN 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript df.sort_values([&#39;수학&#39;, &#39;영어&#39;], ascending=False) # 수학, 영어 점수 기준으로 내림차순 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 6번 변덕규 능남고 202 80 100 95 85 80 C 8번 윤대협 능남고 190 100 85 90 95 95 C# 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 2번 정대만 북산고 184 40 35 50 55 25 Java 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 5번 강백호 북산고 188 15 20 10 35 10 NaN df.sort_values([&#39;수학&#39;, &#39;영어&#39;]) # 수학, 영어 점수 기준으로 오름차순 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 5번 강백호 북산고 188 15 20 10 35 10 NaN 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 2번 정대만 북산고 184 40 35 50 55 25 Java 4번 서태웅 북산고 187 40 60 70 75 80 NaN 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 8번 윤대협 능남고 190 100 85 90 95 95 C# 6번 변덕규 능남고 202 80 100 95 85 80 C 1번 채치수 북산고 197 90 85 100 95 85 Python df.sort_values([&#39;수학&#39;, &#39;영어&#39;], ascending=[True, False]) # 수학 점수는 오름차순, 영어 점수는 내림차순으로 정렬 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 5번 강백호 북산고 188 15 20 10 35 10 NaN 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 8번 윤대협 능남고 190 100 85 90 95 95 C# 6번 변덕규 능남고 202 80 100 95 85 80 C 1번 채치수 북산고 197 90 85 100 95 85 Python df[&#39;키&#39;].sort_valueslues()지원번호3번 1682번 1844번 1875번 1887번 1888번 1901번 1976번 202Name: 키, dtype: int64df[&#39;키&#39;].sort_values(ascending=False)지원번호6번 2021번 1978번 1905번 1887번 1884번 1872번 1843번 168Name: 키, dtype: int64df.sort_index() 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.sort_index(ascending=False) 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 8번 윤대협 능남고 190 100 85 90 95 95 C# 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 6번 변덕규 능남고 202 80 100 95 85 80 C 5번 강백호 북산고 188 15 20 10 35 10 NaN 4번 서태웅 북산고 187 40 60 70 75 80 NaN 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 2번 정대만 북산고 184 40 35 50 55 25 Java 1번 채치수 북산고 197 90 85 100 95 85 Python " }, { "title": "10. 결측치", "url": "/posts/10_%EA%B2%B0%EC%B8%A1%EC%B9%98/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:39:00 +0900", "snippet": "10. 결측치비어있는 데이터import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# 데이터 채우기 fillnadf.fillna(&#39;&#39;) # NaN 데이터를 빈 칸으로 채움 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 5번 강백호 북산고 188 15 20 10 35 10 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.fillna(&#39;없음&#39;) 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 없음 5번 강백호 북산고 188 15 20 10 35 10 없음 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# import numpy as npdf[&#39;학교&#39;] = np.nan # 학교 데이터 전체를 NaN 으로 채움df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 NaN 197 90 85 100 95 85 Python 2번 정대만 NaN 184 40 35 50 55 25 Java 3번 송태섭 NaN 168 80 75 70 80 75 Javascript 4번 서태웅 NaN 187 40 60 70 75 80 NaN 5번 강백호 NaN 188 15 20 10 35 10 NaN 6번 변덕규 NaN 202 80 100 95 85 80 C 7번 황태산 NaN 188 55 65 45 40 35 PYTHON 8번 윤대협 NaN 190 100 85 90 95 95 C# df.fillna(&#39;모름&#39;) 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 모름 197 90 85 100 95 85 Python 2번 정대만 모름 184 40 35 50 55 25 Java 3번 송태섭 모름 168 80 75 70 80 75 Javascript 4번 서태웅 모름 187 40 60 70 75 80 모름 5번 강백호 모름 188 15 20 10 35 10 모름 6번 변덕규 모름 202 80 100 95 85 80 C 7번 황태산 모름 188 55 65 45 40 35 PYTHON 8번 윤대협 모름 190 100 85 90 95 95 C# df.fillna(&#39;모름&#39;, inplace=True)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 모름 197 90 85 100 95 85 Python 2번 정대만 모름 184 40 35 50 55 25 Java 3번 송태섭 모름 168 80 75 70 80 75 Javascript 4번 서태웅 모름 187 40 60 70 75 80 모름 5번 강백호 모름 188 15 20 10 35 10 모름 6번 변덕규 모름 202 80 100 95 85 80 C 7번 황태산 모름 188 55 65 45 40 35 PYTHON 8번 윤대협 모름 190 100 85 90 95 95 C# df = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df[&#39;SW특기&#39;].fillna(&#39;확인 중&#39;, inplace=True) # SW특기 데이터 중에서 NaN에 대해서 채움df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 확인 중 5번 강백호 북산고 188 15 20 10 35 10 확인 중 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# 데이터 제외하기 dropnadf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.dropna() # 전체 데이터 중에서 NaN 을 포함하는 데이터 삭제 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# axis : index or columns how : any or alldf.dropna(axis=&#39;index&#39;, how=&#39;any&#39;) # NaN 가 하나라도 있는 row 삭제 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.dropna(axis=&#39;columns&#39;) # NaN 이 하나라도 있는 column 삭제 이름 학교 키 국어 영어 수학 과학 사회 지원번호 1번 채치수 북산고 197 90 85 100 95 85 2번 정대만 북산고 184 40 35 50 55 25 3번 송태섭 북산고 168 80 75 70 80 75 4번 서태웅 북산고 187 40 60 70 75 80 5번 강백호 북산고 188 15 20 10 35 10 6번 변덕규 능남고 202 80 100 95 85 80 7번 황태산 능남고 188 55 65 45 40 35 8번 윤대협 능남고 190 100 85 90 95 95 df[&#39;학교&#39;] = np.nandf 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 NaN 197 90 85 100 95 85 Python 2번 정대만 NaN 184 40 35 50 55 25 Java 3번 송태섭 NaN 168 80 75 70 80 75 Javascript 4번 서태웅 NaN 187 40 60 70 75 80 NaN 5번 강백호 NaN 188 15 20 10 35 10 NaN 6번 변덕규 NaN 202 80 100 95 85 80 C 7번 황태산 NaN 188 55 65 45 40 35 PYTHON 8번 윤대협 NaN 190 100 85 90 95 95 C# df.dropna(axis=&#39;columns&#39;, how=&#39;all&#39;) # 데이터 전체가 NaN 인 경우에만 column 삭제 이름 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 197 90 85 100 95 85 Python 2번 정대만 184 40 35 50 55 25 Java 3번 송태섭 168 80 75 70 80 75 Javascript 4번 서태웅 187 40 60 70 75 80 NaN 5번 강백호 188 15 20 10 35 10 NaN 6번 변덕규 202 80 100 95 85 80 C 7번 황태산 188 55 65 45 40 35 PYTHON 8번 윤대협 190 100 85 90 95 95 C# " }, { "title": "9. 데이터 선택 (조건)", "url": "/posts/9_%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%84%A0%ED%83%9D-(%EC%A1%B0%EA%B1%B4)/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:38:00 +0900", "snippet": "9. 데이터 선택 (조건)조건에 해당하는 데이터 선택import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df[&#39;키&#39;] &amp;gt;= 185 # 학생들의 키가 185 이상인지 여부를 True/False지원번호1번 True2번 False3번 False4번 True5번 True6번 True7번 True8번 TrueName: 키, dtype: boolfilt = (df[&#39;키&#39;] &amp;gt;= 185)df[filt] 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df[~filt] # filter 를 역으로 적용 (185 미만) 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript df[df[&#39;키&#39;] &amp;gt;= 185] 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.loc[df[&#39;키&#39;] &amp;gt;= 185, &#39;수학&#39;] # 키가 185 이상인 학생들의 수학 데이터지원번호1번 1004번 705번 106번 957번 458번 90Name: 수학, dtype: int64df.loc[df[&#39;키&#39;] &amp;gt;= 185, [&#39;이름&#39;, &#39;수학&#39;, &#39;사회&#39;]] # 키가 185 이상인 학생들의 이름, 수학, 사회 데이터 이름 수학 사회 지원번호 1번 채치수 100 85 4번 서태웅 70 80 5번 강백호 10 10 6번 변덕규 95 80 7번 황태산 45 35 8번 윤대협 90 95 다양한 조건&amp;amp; 그리고df.loc[(df[&#39;키&#39;] &amp;gt;= 185) &amp;amp; (df[&#39;학교&#39;] == &#39;북산고&#39;)] # 키가 185 이상인 북산고 학생 데이터 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN | 또는df.loc[(df[&#39;키&#39;] &amp;lt; 170) | (df[&#39;키&#39;] &amp;gt; 200)] # 키가 170보다 작거나, 200보다 큰 학생 데이터 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 6번 변덕규 능남고 202 80 100 95 85 80 C str 함수filt = df[&#39;이름&#39;].str.startswith(&#39;송&#39;) # &#39;송&#39;씨 성을 가진 사람df[filt] 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 3번 송태섭 북산고 168 80 75 70 80 75 Javascript filt = df[&#39;이름&#39;].str.contains(&#39;태&#39;) # 이름에 &#39;태&#39;가 들어가는 사람df[filt] 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 7번 황태산 능남고 188 55 65 45 40 35 PYTHON df[~filt] # 이름에 &#39;태&#39;가 들어가는 사람을 제외 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 8번 윤대협 능남고 190 100 85 90 95 95 C# langs = [&#39;Python&#39;, &#39;Java&#39;]filt = df[&#39;SW특기&#39;].isin(langs) # SW 특기가 Python 이거나 Java 인 사람df[filt] 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java langs = [&#39;python&#39;, &#39;java&#39;]filt = df[&#39;SW특기&#39;].str.lower().isin(langs) # 소문자, 대문자 구별 없이 데이터 출력df[filt] 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 7번 황태산 능남고 188 55 65 45 40 35 PYTHON filt = df[&#39;SW특기&#39;].str.contains(&#39;Java&#39;, na=False) # NaN 데이터에 대해서 False로 설정df[filt] 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript " }, { "title": "8. 데이터 선택 (iloc)", "url": "/posts/8_%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%84%A0%ED%83%9D(iloc)/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:37:00 +0900", "snippet": "8. 데이터 선택 (iloc)위치를 이용하여 원하는 row 에서 원하는 col 선택import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.iloc[0] # 0번째 위치의 데이터이름 채치수학교 북산고키 197국어 90영어 85수학 100과학 95사회 85SW특기 PythonName: 1번, dtype: objectdf.iloc[4] # 4번째 위치의 데이터이름 강백호학교 북산고키 188국어 15영어 20수학 10과학 35사회 10SW특기 NaNName: 5번, dtype: objectdf.iloc[0:5] # 0 ~ 4 번째 위치의 데이터 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN df.iloc[0, 1] # 0번째 위치의 1번째 데이터&#39;북산고&#39;df.iloc[4, 2] # 4번째 위치의 2번째 데이터188df.iloc[[0, 1], 2] # 0, 1번째 위치의 학생의 2번째 데이터지원번호1번 1972번 184Name: 키, dtype: int64df.iloc[[0, 1], [3, 4]] # 0, 1 번째 위치의 학생의 3, 4 번째 데이터 국어 영어 지원번호 1번 90 85 2번 40 35 df.iloc[0:5, 3:8] # 0 ~ 4번째 위치의 학생 중에서 3 ~ 7번째 데이터 국어 영어 수학 과학 사회 지원번호 1번 90 85 100 95 85 2번 40 35 50 55 25 3번 80 75 70 80 75 4번 40 60 70 75 80 5번 15 20 10 35 10 " }, { "title": "7. 데이터 선택 (loc)", "url": "/posts/7_%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%84%A0%ED%83%9D(loc)/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:36:00 +0900", "snippet": "7. 데이터 선택 (loc)이름을 이용하여 원하는 row 에서 원하는 col 선택import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.loc[&#39;1번&#39;] # index 1번에 해당하는 전체 데이터이름 채치수학교 북산고키 197국어 90영어 85수학 100과학 95사회 85SW특기 PythonName: 1번, dtype: objectdf.loc[&#39;5번&#39;] # index 5번에 해당하는 전체 데이터이름 강백호학교 북산고키 188국어 15영어 20수학 10과학 35사회 10SW특기 NaNName: 5번, dtype: objectdf.loc[&#39;1번&#39;, &#39;국어&#39;] # index 1번에 해당하는 국어 데이터90df.loc[[&#39;1번&#39;, &#39;2번&#39;], &#39;영어&#39;] # index 1번, 2번에 해당하는 영어 데이터지원번호1번 852번 35Name: 영어, dtype: int64df.loc[[&#39;1번&#39;, &#39;2번&#39;], [&#39;영어&#39;, &#39;수학&#39;]] # index 1번, 2번에 해당하는 영어, 수학 데이터 영어 수학 지원번호 1번 85 100 2번 35 50 df.loc[&#39;1번&#39;:&#39;5번&#39;, &#39;국어&#39;:&#39;사회&#39;] # index 1번부터 5번까지 국어부터 사회까지 데이터 국어 영어 수학 과학 사회 지원번호 1번 90 85 100 95 85 2번 40 35 50 55 25 3번 80 75 70 80 75 4번 40 60 70 75 80 5번 15 20 10 35 10 " }, { "title": "6. 데이터 선택 (기본)", "url": "/posts/6_%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%84%A0%ED%83%9D(%EA%B8%B0%EB%B3%B8)/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:35:00 +0900", "snippet": "6. 데이터 선택 (기본)import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# column 선택 (label)df[&#39;이름&#39;]지원번호1번 채치수2번 정대만3번 송태섭4번 서태웅5번 강백호6번 변덕규7번 황태산8번 윤대협Name: 이름, dtype: objectdf[[&#39;이름&#39;, &#39;키&#39;]] 이름 키 지원번호 1번 채치수 197 2번 정대만 184 3번 송태섭 168 4번 서태웅 187 5번 강백호 188 6번 변덕규 202 7번 황태산 188 8번 윤대협 190 column 선택 (정수 index)df.columnsIndex([&#39;이름&#39;, &#39;학교&#39;, &#39;키&#39;, &#39;국어&#39;, &#39;영어&#39;, &#39;수학&#39;, &#39;과학&#39;, &#39;사회&#39;, &#39;SW특기&#39;], dtype=&#39;object&#39;)df.columns[0]&#39;이름&#39;df.columns[2]&#39;키&#39;df[df.columns[0]] # df[&#39;이름&#39;] 과 동일한 동작 # 컬럼 이름을 모를경우 이런식으로 사용지원번호1번 채치수2번 정대만3번 송태섭4번 서태웅5번 강백호6번 변덕규7번 황태산8번 윤대협Name: 이름, dtype: objectdf[df.columns[-1]] # 맨 끝에 있는 값을 가져옴지원번호1번 Python2번 Java3번 Javascript4번 NaN5번 NaN6번 C7번 PYTHON8번 C#Name: SW특기, dtype: object슬라이싱df[&#39;영어&#39;][0:5] # 0~4까지 영어 점수 데이터 가져옴지원번호1번 852번 353번 754번 605번 20Name: 영어, dtype: int64df[[&#39;이름&#39;, &#39;키&#39;]][:3] # 처음 3명의 이름과 키 정보를 가져옴 이름 키 지원번호 1번 채치수 197 2번 정대만 184 3번 송태섭 168 df[3:] 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# " }, { "title": "5. 데이터 확인", "url": "/posts/5_%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%99%95%EC%9D%B8/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:34:00 +0900", "snippet": "5. 데이터 확인import pandas as pddf = pd.read_excel(&#39;score.xlsx&#39;, index_col = &#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# DataFrame 확인계산 가능한 데이터에 대해 column 별로 데이터의 갯수, 평균, 표준편차, 최소/최대값 등의 정보를 보여줌df.describe() # 계산 가능한 데이터들에 대해서 자동으로 계산해서 보여줌 키 국어 영어 수학 과학 사회 count 8.000000 8.000000 8.000000 8.000000 8.000000 8.000000 mean 188.000000 62.500000 65.625000 66.250000 70.000000 60.625000 std 9.985704 29.519969 26.917533 30.325614 23.754699 32.120032 min 168.000000 15.000000 20.000000 10.000000 35.000000 10.000000 25% 186.250000 40.000000 53.750000 48.750000 51.250000 32.500000 50% 188.000000 67.500000 70.000000 70.000000 77.500000 77.500000 75% 191.750000 82.500000 85.000000 91.250000 87.500000 81.250000 max 202.000000 100.000000 100.000000 100.000000 95.000000 95.000000 df.info()&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;Index: 8 entries, 1번 to 8번Data columns (total 9 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 이름 8 non-null object 1 학교 8 non-null object 2 키 8 non-null int64 3 국어 8 non-null int64 4 영어 8 non-null int64 5 수학 8 non-null int64 6 과학 8 non-null int64 7 사회 8 non-null int64 8 SW특기 6 non-null objectdtypes: int64(6), object(3)memory usage: 640.0+ bytesdf.head() # 처음 5개의 row를 가져옴 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN df.head(7) # 처음 7개의 row를 가져옴 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON df.tail() # 마지막 5개 row를 가져옴 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.tail(3) # 마지막 3개 row를 가져옴 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.valuesarray([[&#39;채치수&#39;, &#39;북산고&#39;, 197, 90, 85, 100, 95, 85, &#39;Python&#39;], [&#39;정대만&#39;, &#39;북산고&#39;, 184, 40, 35, 50, 55, 25, &#39;Java&#39;], [&#39;송태섭&#39;, &#39;북산고&#39;, 168, 80, 75, 70, 80, 75, &#39;Javascript&#39;], [&#39;서태웅&#39;, &#39;북산고&#39;, 187, 40, 60, 70, 75, 80, nan], [&#39;강백호&#39;, &#39;북산고&#39;, 188, 15, 20, 10, 35, 10, nan], [&#39;변덕규&#39;, &#39;능남고&#39;, 202, 80, 100, 95, 85, 80, &#39;C&#39;], [&#39;황태산&#39;, &#39;능남고&#39;, 188, 55, 65, 45, 40, 35, &#39;PYTHON&#39;], [&#39;윤대협&#39;, &#39;능남고&#39;, 190, 100, 85, 90, 95, 95, &#39;C#&#39;]], dtype=object)df.indexIndex([&#39;1번&#39;, &#39;2번&#39;, &#39;3번&#39;, &#39;4번&#39;, &#39;5번&#39;, &#39;6번&#39;, &#39;7번&#39;, &#39;8번&#39;], dtype=&#39;object&#39;, name=&#39;지원번호&#39;)df.columnsIndex([&#39;이름&#39;, &#39;학교&#39;, &#39;키&#39;, &#39;국어&#39;, &#39;영어&#39;, &#39;수학&#39;, &#39;과학&#39;, &#39;사회&#39;, &#39;SW특기&#39;], dtype=&#39;object&#39;)df.shape # row, column(8, 9)series 확인df[&#39;키&#39;].describe()count 8.000000mean 188.000000std 9.985704min 168.00000025% 186.25000050% 188.00000075% 191.750000max 202.000000Name: 키, dtype: float64df[&#39;키&#39;].min()168df[&#39;키&#39;].max()202df[&#39;키&#39;].nlargest(3) # 키 큰 사람 순서대로 3명 데이터지원번호6번 2021번 1978번 190Name: 키, dtype: int64df[&#39;키&#39;].mean()188.0df[&#39;키&#39;].sum()1504df[&#39;SW특기&#39;].count()6df[&#39;학교&#39;].unique() # 중복 제외array([&#39;북산고&#39;, &#39;능남고&#39;], dtype=object)df[&#39;학교&#39;].nunique()2" }, { "title": "4. 파일 저장 및 열기", "url": "/posts/4_%ED%8C%8C%EC%9D%BC-%EC%A0%80%EC%9E%A5-%EB%B0%8F-%EC%97%B4%EA%B8%B0/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:33:00 +0900", "snippet": "4. 파일 저장 및 열기DataFrame 객체를 excel, csv, txt 등 파일로 저장 및 열기import pandas as pddata = { &#39;이름&#39; : [&#39;채치수&#39;, &#39;정대만&#39;, &#39;송태섭&#39;, &#39;서태웅&#39;, &#39;강백호&#39;, &#39;변덕규&#39;, &#39;황태산&#39;, &#39;윤대협&#39;], &#39;학교&#39; : [&#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;능남고&#39;, &#39;능남고&#39;, &#39;능남고&#39;], &#39;키&#39; : [197, 184, 168, 187, 188, 202, 188, 190], &#39;국어&#39; : [90, 40, 80, 40, 15, 80, 55, 100], &#39;영어&#39; : [85, 35, 75, 60, 20, 100, 65, 85], &#39;수학&#39; : [100, 50, 70, 70, 10, 95, 45, 90], &#39;과학&#39; : [95, 55, 80, 75, 35, 85, 40, 95], &#39;사회&#39; : [85, 25, 75, 80, 10, 80, 35, 95], &#39;SW특기&#39; : [&#39;Python&#39;, &#39;Java&#39;, &#39;Javascript&#39;, &#39;&#39;, &#39;&#39;, &#39;C&#39;, &#39;PYTHON&#39;, &#39;C#&#39;]}df = pd.DataFrame(data, index=[&#39;1번&#39;, &#39;2번&#39;, &#39;3번&#39;, &#39;4번&#39;, &#39;5번&#39;, &#39;6번&#39;, &#39;7번&#39;, &#39;8번&#39;])df.index.name = &#39;지원번호&#39;df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 5번 강백호 북산고 188 15 20 10 35 10 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# 저장하기csv 파일로 저장df.to_csv(&#39;score.csv&#39;, encoding=&#39;utf-8-sig&#39;) # csv 파일로 저장 및 한글 깨짐 방지df.to_csv(&#39;score.csv&#39;, encoding=&#39;utf-8-sig&#39;, index=False) # 인덱스 &#39;지원번호&#39; 삭제텍스트 파일로 저장df.to_csv(&#39;score.txt&#39;, sep=&#39;\\t&#39;) # tab 으로 구분된 텍스트 파일엑셀 파일로 저장df.to_excel(&#39;score.xlsx&#39;)열기csv 파일 열기df = pd.read_csv(&#39;score.csv&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 0 채치수 북산고 197 90 85 100 95 85 Python 1 정대만 북산고 184 40 35 50 55 25 Java 2 송태섭 북산고 168 80 75 70 80 75 Javascript 3 서태웅 북산고 187 40 60 70 75 80 NaN 4 강백호 북산고 188 15 20 10 35 10 NaN 5 변덕규 능남고 202 80 100 95 85 80 C 6 황태산 능남고 188 55 65 45 40 35 PYTHON 7 윤대협 능남고 190 100 85 90 95 95 C# df = pd.read_csv(&#39;score.csv&#39;, skiprows=1) # 지정된 갯수 만큼의 row를 건너뜀df 채치수 북산고 197 90 85 100 95 85.1 Python 0 정대만 북산고 184 40 35 50 55 25 Java 1 송태섭 북산고 168 80 75 70 80 75 Javascript 2 서태웅 북산고 187 40 60 70 75 80 NaN 3 강백호 북산고 188 15 20 10 35 10 NaN 4 변덕규 능남고 202 80 100 95 85 80 C 5 황태산 능남고 188 55 65 45 40 35 PYTHON 6 윤대협 능남고 190 100 85 90 95 95 C# df = pd.read_csv(&#39;score.csv&#39;, skiprows=[1, 3, 5]) # 1, 3, 5, row는 제외df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 0 정대만 북산고 184 40 35 50 55 25 Java 1 서태웅 북산고 187 40 60 70 75 80 NaN 2 변덕규 능남고 202 80 100 95 85 80 C 3 황태산 능남고 188 55 65 45 40 35 PYTHON 4 윤대협 능남고 190 100 85 90 95 95 C# df = pd.read_csv(&#39;score.csv&#39;, nrows=4) # 지정된 갯수 만큼의 row 만 가져옴df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 0 채치수 북산고 197 90 85 100 95 85 Python 1 정대만 북산고 184 40 35 50 55 25 Java 2 송태섭 북산고 168 80 75 70 80 75 Javascript 3 서태웅 북산고 187 40 60 70 75 80 NaN df = pd.read_csv(&#39;score.csv&#39;, skiprows=2, nrows=4) # 처음 2 row 무시, 이후에 4 row를 가져옴df 정대만 북산고 184 40 35 50 55 25 Java 0 송태섭 북산고 168 80 75 70 80 75 Javascript 1 서태웅 북산고 187 40 60 70 75 80 NaN 2 강백호 북산고 188 15 20 10 35 10 NaN 3 변덕규 능남고 202 80 100 95 85 80 C 텍스트 파일 열기df = pd.read_csv(&#39;score.txt&#39;, sep=&#39;\\t&#39;)df 지원번호 이름 학교 키 국어 영어 수학 과학 사회 SW특기 0 1번 채치수 북산고 197 90 85 100 95 85 Python 1 2번 정대만 북산고 184 40 35 50 55 25 Java 2 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 3 4번 서태웅 북산고 187 40 60 70 75 80 NaN 4 5번 강백호 북산고 188 15 20 10 35 10 NaN 5 6번 변덕규 능남고 202 80 100 95 85 80 C 6 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 7 8번 윤대협 능남고 190 100 85 90 95 95 C# df = pd.read_csv(&#39;score.txt&#39;, sep=&#39;\\t&#39;, index_col=&#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df = pd.read_csv(&#39;score.txt&#39;, sep=&#39;\\t&#39;)df.set_index(&#39;지원번호&#39;, inplace=ace=True)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# 엑셀 파일 열기df = pd.read_excel(&#39;score.xlsx&#39;)df 지원번호 이름 학교 키 국어 영어 수학 과학 사회 SW특기 0 1번 채치수 북산고 197 90 85 100 95 85 Python 1 2번 정대만 북산고 184 40 35 50 55 25 Java 2 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 3 4번 서태웅 북산고 187 40 60 70 75 80 NaN 4 5번 강백호 북산고 188 15 20 10 35 10 NaN 5 6번 변덕규 능남고 202 80 100 95 85 80 C 6 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 7 8번 윤대협 능남고 190 100 85 90 95 95 C# df = pd.read_excel(&#39;score.xlsx&#39;, index_col=&#39;지원번호&#39;)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 NaN 5번 강백호 북산고 188 15 20 10 35 10 NaN 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# " }, { "title": "3. Index", "url": "/posts/3_Index/", "categories": "python, dataframe", "tags": "pandas, index, python", "date": "2021-12-11 08:32:05 +0900", "snippet": "3. Index데이터에 접근할 수 있는 주소 값lst = [&#39;유재석&#39;, &#39;하하&#39;]lst[0]&#39;유재석&#39;lst[1]&#39;하하&#39;import pandas as pddata = { &#39;이름&#39; : [&#39;채치수&#39;, &#39;정대만&#39;, &#39;송태섭&#39;, &#39;서태웅&#39;, &#39;강백호&#39;, &#39;변덕규&#39;, &#39;황태산&#39;, &#39;윤대협&#39;], &#39;학교&#39; : [&#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;능남고&#39;, &#39;능남고&#39;, &#39;능남고&#39;], &#39;키&#39; : [197, 184, 168, 187, 188, 202, 188, 190], &#39;국어&#39; : [90, 40, 80, 40, 15, 80, 55, 100], &#39;영어&#39; : [85, 35, 75, 60, 20, 100, 65, 85], &#39;수학&#39; : [100, 50, 70, 70, 10, 95, 45, 90], &#39;과학&#39; : [95, 55, 80, 75, 35, 85, 40, 95], &#39;사회&#39; : [85, 25, 75, 80, 10, 80, 35, 95], &#39;SW특기&#39; : [&#39;Python&#39;, &#39;Java&#39;, &#39;Javascript&#39;, &#39;&#39;, &#39;&#39;, &#39;C&#39;, &#39;PYTHON&#39;, &#39;C#&#39;]}df = pd.DataFrame(data, index=[&#39;1번&#39;, &#39;2번&#39;, &#39;3번&#39;, &#39;4번&#39;, &#39;5번&#39;, &#39;6번&#39;, &#39;7번&#39;, &#39;8번&#39;])df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 5번 강백호 북산고 188 15 20 10 35 10 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# df.indexIndex([&#39;1번&#39;, &#39;2번&#39;, &#39;3번&#39;, &#39;4번&#39;, &#39;5번&#39;, &#39;6번&#39;, &#39;7번&#39;, &#39;8번&#39;], dtype=&#39;object&#39;)Index 이름 설정df.index.name = &#39;지원번호&#39;df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 지원번호 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 5번 강백호 북산고 188 15 20 10 35 10 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# Index 초기화df.reset_index() 지원번호 이름 학교 키 국어 영어 수학 과학 사회 SW특기 0 1번 채치수 북산고 197 90 85 100 95 85 Python 1 2번 정대만 북산고 184 40 35 50 55 25 Java 2 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 3 4번 서태웅 북산고 187 40 60 70 75 80 4 5번 강백호 북산고 188 15 20 10 35 10 5 6번 변덕규 능남고 202 80 100 95 85 80 C 6 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 7 8번 윤대협 능남고 190 100 85 90 95 95 C# df.reset_index(drop=True) # 원래 쓰던 &#39;지원번호&#39; 인덱스 삭제 이름 학교 키 국어 영어 수학 과학 사회 SW특기 0 채치수 북산고 197 90 85 100 95 85 Python 1 정대만 북산고 184 40 35 50 55 25 Java 2 송태섭 북산고 168 80 75 70 80 75 Javascript 3 서태웅 북산고 187 40 60 70 75 80 4 강백호 북산고 188 15 20 10 35 10 5 변덕규 능남고 202 80 100 95 85 80 C 6 황태산 능남고 188 55 65 45 40 35 PYTHON 7 윤대협 능남고 190 100 85 90 95 95 C# df.reset_index(drop=True, inplace=True) # 실제 데이터에 바로 반영df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 0 채치수 북산고 197 90 85 100 95 85 Python 1 정대만 북산고 184 40 35 50 55 25 Java 2 송태섭 북산고 168 80 75 70 80 75 Javascript 3 서태웅 북산고 187 40 60 70 75 80 4 강백호 북산고 188 15 20 10 35 10 5 변덕규 능남고 202 80 100 95 85 80 C 6 황태산 능남고 188 55 65 45 40 35 PYTHON 7 윤대협 능남고 190 100 85 90 95 95 C# Index 설정지정한 column으로 index 를 설정df.set_index(&#39;이름&#39;) 학교 키 국어 영어 수학 과학 사회 SW특기 이름 채치수 북산고 197 90 85 100 95 85 Python 정대만 북산고 184 40 35 50 55 25 Java 송태섭 북산고 168 80 75 70 80 75 Javascript 서태웅 북산고 187 40 60 70 75 80 강백호 북산고 188 15 20 10 35 10 변덕규 능남고 202 80 100 95 85 80 C 황태산 능남고 188 55 65 45 40 35 PYTHON 윤대협 능남고 190 100 85 90 95 95 C# df.set_index(&#39;이름&#39;, inplace=True)df 학교 키 국어 영어 수학 과학 사회 SW특기 이름 채치수 북산고 197 90 85 100 95 85 Python 정대만 북산고 184 40 35 50 55 25 Java 송태섭 북산고 168 80 75 70 80 75 Javascript 서태웅 북산고 187 40 60 70 75 80 강백호 북산고 188 15 20 10 35 10 변덕규 능남고 202 80 100 95 85 80 C 황태산 능남고 188 55 65 45 40 35 PYTHON 윤대협 능남고 190 100 85 90 95 95 C# Index 정렬Index를 기준으로 오름차순, 내림차순 정렬df.sort_index() # 인덱스로 오름차순 정렬 학교 키 국어 영어 수학 과학 사회 SW특기 이름 강백호 북산고 188 15 20 10 35 10 변덕규 능남고 202 80 100 95 85 80 C 서태웅 북산고 187 40 60 70 75 80 송태섭 북산고 168 80 75 70 80 75 Javascript 윤대협 능남고 190 100 85 90 95 95 C# 정대만 북산고 184 40 35 50 55 25 Java 채치수 북산고 197 90 85 100 95 85 Python 황태산 능남고 188 55 65 45 40 35 PYTHON df.sort_index(ascending=False) # 내림차순으로 정렬 학교 키 국어 영어 수학 과학 사회 SW특기 이름 황태산 능남고 188 55 65 45 40 35 PYTHON 채치수 북산고 197 90 85 100 95 85 Python 정대만 북산고 184 40 35 50 55 25 Java 윤대협 능남고 190 100 85 90 95 95 C# 송태섭 북산고 168 80 75 70 80 75 Javascript 서태웅 북산고 187 40 60 70 75 80 변덕규 능남고 202 80 100 95 85 80 C 강백호 북산고 188 15 20 10 35 10 " }, { "title": "2. DataFrame", "url": "/posts/2_DataFrame/", "categories": "python, dataframe", "tags": "pandas, dataframe, python", "date": "2021-12-11 08:31:00 +0900", "snippet": "2. DataFrame2차원 데이터 (Series 들의 모음)Data 준비사전 (dict) 자료구조를 통해 생성예) 슬램덩크 주요 인물 8명에 대한 데이터data = { &#39;이름&#39; : [&#39;채치수&#39;, &#39;정대만&#39;, &#39;송태섭&#39;, &#39;서태웅&#39;, &#39;강백호&#39;, &#39;변덕규&#39;, &#39;황태산&#39;, &#39;윤대협&#39;], &#39;학교&#39; : [&#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;능남고&#39;, &#39;능남고&#39;, &#39;능남고&#39;], &#39;키&#39; : [197, 184, 168, 187, 188, 202, 188, 190], &#39;국어&#39; : [90, 40, 80, 40, 15, 80, 55, 100], &#39;영어&#39; : [85, 35, 75, 60, 20, 100, 65, 85], &#39;수학&#39; : [100, 50, 70, 70, 10, 95, 45, 90], &#39;과학&#39; : [95, 55, 80, 75, 35, 85, 40, 95], &#39;사회&#39; : [85, 25, 75, 80, 10, 80, 35, 95], &#39;SW특기&#39; : [&#39;Python&#39;, &#39;Java&#39;, &#39;Javascript&#39;, &#39;&#39;, &#39;&#39;, &#39;C&#39;, &#39;PYTHON&#39;, &#39;C#&#39;]}data{&#39;이름&#39;: [&#39;채치수&#39;, &#39;정대만&#39;, &#39;송태섭&#39;, &#39;서태웅&#39;, &#39;강백호&#39;, &#39;변덕규&#39;, &#39;황태산&#39;, &#39;윤대협&#39;], &#39;학교&#39;: [&#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;북산고&#39;, &#39;능남고&#39;, &#39;능남고&#39;, &#39;능남고&#39;], &#39;키&#39;: [197, 184, 168, 187, 188, 202, 188, 190], &#39;국어&#39;: [90, 40, 80, 40, 15, 80, 55, 100], &#39;영어&#39;: [85, 35, 75, 60, 20, 100, 65, 85], &#39;수학&#39;: [100, 50, 70, 70, 10, 95, 45, 90], &#39;과학&#39;: [95, 55, 80, 75, 35, 85, 40, 95], &#39;사회&#39;: [85, 25, 75, 80, 10, 80, 35, 95], &#39;SW특기&#39;: [&#39;Python&#39;, &#39;Java&#39;, &#39;Javascript&#39;, &#39;&#39;, &#39;&#39;, &#39;C&#39;, &#39;PYTHON&#39;, &#39;C#&#39;]}data[&#39;이름&#39;][&#39;채치수&#39;, &#39;정대만&#39;, &#39;송태섭&#39;, &#39;서태웅&#39;, &#39;강백호&#39;, &#39;변덕규&#39;, &#39;황태산&#39;, &#39;윤대협&#39;]data[&#39;키&#39;][197, 184, 168, 187, 188, 202, 188, 190]DataFrame 객체 생성import pandas as pddf = pd.DataFrame(data)df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 0 채치수 북산고 197 90 85 100 95 85 Python 1 정대만 북산고 184 40 35 50 55 25 Java 2 송태섭 북산고 168 80 75 70 80 75 Javascript 3 서태웅 북산고 187 40 60 70 75 80 4 강백호 북산고 188 15 20 10 35 10 5 변덕규 능남고 202 80 100 95 85 80 C 6 황태산 능남고 188 55 65 45 40 35 PYTHON 7 윤대협 능남고 190 100 85 90 95 95 C# 데이터 접근df[&#39;이름&#39;]0 채치수1 정대만2 송태섭3 서태웅4 강백호5 변덕규6 황태산7 윤대협Name: 이름, dtype: objectdf[&#39;키&#39;]0 1971 1842 1683 1874 1885 2026 1887 190Name: 키, dtype: int64df[[&#39;이름&#39;, &#39;키&#39;]] 이름 키 0 채치수 197 1 정대만 184 2 송태섭 168 3 서태웅 187 4 강백호 188 5 변덕규 202 6 황태산 188 7 윤대협 190 DataFrame 객체 생성 (Index 지정)df = pd.DataFrame(data, index=[&#39;1번&#39;, &#39;2번&#39;, &#39;3번&#39;, &#39;4번&#39;, &#39;5번&#39;, &#39;6번&#39;, &#39;7번&#39;, &#39;8번&#39;])df 이름 학교 키 국어 영어 수학 과학 사회 SW특기 1번 채치수 북산고 197 90 85 100 95 85 Python 2번 정대만 북산고 184 40 35 50 55 25 Java 3번 송태섭 북산고 168 80 75 70 80 75 Javascript 4번 서태웅 북산고 187 40 60 70 75 80 5번 강백호 북산고 188 15 20 10 35 10 6번 변덕규 능남고 202 80 100 95 85 80 C 7번 황태산 능남고 188 55 65 45 40 35 PYTHON 8번 윤대협 능남고 190 100 85 90 95 95 C# DataFrame 객체 생성 (Column 지정)data 중에서 원하는 컬럼만 선택하거나, 순서 변경 가능df = pd.DataFrame(data, columns=[&#39;이름&#39;, &#39;학교&#39;, &#39;키&#39;])df 이름 학교 키 0 채치수 북산고 197 1 정대만 북산고 184 2 송태섭 북산고 168 3 서태웅 북산고 187 4 강백호 북산고 188 5 변덕규 능남고 202 6 황태산 능남고 188 7 윤대협 능남고 190 # 순서 변경df = pd.DataFrame(data, columns=[&#39;키&#39;, &#39;학교&#39;, &#39;이름&#39;])df 키 학교 이름 0 197 북산고 채치수 1 184 북산고 정대만 2 168 북산고 송태섭 3 187 북산고 서태웅 4 188 북산고 강백호 5 202 능남고 변덕규 6 188 능남고 황태산 7 190 능남고 윤대협 " }, { "title": "1. Series", "url": "/posts/1_Series/", "categories": "python, dataframe", "tags": "pandas, python, series", "date": "2021-12-11 08:30:00 +0900", "snippet": "Pandas파이썬에서 사용하는 데이터 분석 라이브러리import pandas as pd1. Series1차원 데이터 (정수, 실수, 문자열 등)Series 객체 생성예) 1월부터 4월까지 평균 온도 데이터 (-20, -10, 10, 20)temp = pd.Series([-20, -10, 10, 20])temp0 -201 -102 103 20dtype: int64temp[0] # 1월 온도-20temp[2] # 3월 온도10Series 객체 생성 (Index 지정)temp = pd.Series([-20, -10, 10, 20], index=[&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Aqr&#39;])tempJan -20Feb -10Mar 10Aqr 20dtype: int64temp[&#39;Jan&#39;] # 인덱스 Jan에 해당하는 데이터 출력-20temp[&#39;Aqr&#39;] # 인덱스 Aqr에 해당하는 데이터 출력20" } ]
